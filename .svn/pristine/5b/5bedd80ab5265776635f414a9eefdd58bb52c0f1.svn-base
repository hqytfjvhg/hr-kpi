<template>
  <div class="mainHome">
    <div class="mainHome-title">新增事件</div>
    <div style="padding-top: 25vh">
      <el-button circle type="success" size="large" style="width: 100px; height: 100px" @click="getModelList">
        <el-icon style="font-size: 50px"><Plus /></el-icon>
      </el-button>
      <div style="margin-top: 10px; color: gray">点击按钮新增事件</div>
    </div>
    <!-- 选择模板创建事件 -->
    <el-dialog v-model="isModel" title="选择模板" width="50%">
      <el-table
        border
        stripe
        :data="modelTableData"
        @selection-change="handleSelectionChange"
        @expand-change="selectValue"
        style="height: 25rem"
        ref="multipleModel"
      >
        <el-table-column type="selection" width="55" />
        <el-table-column label="模板名称" prop="templateName"></el-table-column>
        <el-table-column label="是否使用">
          <template #default="scope">
            <span v-if="scope.row.useState == 0" style="color: #67c23a">未使用</span>
            <span v-if="scope.row.useState == 1" style="color: #f56c6c">使用中</span>
          </template>
        </el-table-column>
      </el-table>
      <div style="margin-top: 1rem; text-align: right">
        <el-button plain @click="isModel = false">取消</el-button>
        <el-button type="success" plain @click="sureCreateAction">确定</el-button>
      </div>
    </el-dialog>

    <!-- 创建事件的窗口 -->
    <el-dialog v-model="dialogVisible" title="事件名称">
      <el-input v-model="valueTitle" style="width: 25rem"></el-input>
      <div style="margin-top: 20px">
        <el-button @click="dialogVisible = false">取消</el-button>
        <el-button @click="create">确定</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import { Plus } from "@element-plus/icons-vue";
import { ElMessage } from "element-plus";
import { getModel, createEvent } from "@/api/values/index";
export default {
  components: { Plus },
  data() {
    return {
      isModel: false, //控制选择模板的弹窗
      dialogVisible: false, //控制命名的弹窗
      modelDetil: [],
      multipleSelection: [], //选择模板
      valueTitle: "", //命名的名字
    };
  },
  methods: {
    getModelList() {
      getModel()
        .then((res) => {
          if (res.data && res.data.code == 0) {
            this.isModel = true;
            // console.log(res, 11111111);
            this.modelTableData = res.data.data;
            console.log(res.data.data);
          }
        })
        .catch((err) => {
          console.log(err, 22222);
        });
    },
    handleSelectionChange(val) {
      this.multipleSelection = val;
      console.log(this.multipleSelection);
    },
    toggleSelection() {
      this.$refs.multipleModel.clearSelection();
    },
    sureCreateAction() {
      if (this.multipleSelection.length > 0) {
        this.dialogVisible = true;
      } else {
        ElMessage.error("请选择模板");
      }
    },
    async create() {
      //创建事件

      if (this.valueTitle !== null && this.valueTitle.split(" ").join("").length !== 0) {
        // 选中的所有模板id
        const modelId = this.multipleSelection.map((item) => {
          return item.templateId;
        });
        // 向后端返回的参数
        const modelList = {
          tempIdList: modelId,
          eventName: this.valueTitle,
          // templateUserDataList: templateUserDataList,
          // userIdList: userIdList,
        };
        await createEvent(modelList);
        this.toggleSelection();
        this.valueTitle = "";
        this.dialogVisible = false;
        this.isModel = false;
        this.$router.push({ name: "createModel" });
      } else {
        ElMessage.error("请输入事件标题");
      }
    },
  },
};
</script>

<style lang="scss" scoped>
.mainHome {
  padding: 1rem;
  background-color: #fff;
  height: 95%;
  border-radius: 10px;
  .mainHome-title {
    display: flex;
    align-items: center;
    justify-content: space-between;
    text-align: left;
    padding: 1rem;
  }
}
// .el-button > span {
//   font-size: 25px;
// }
</style>
