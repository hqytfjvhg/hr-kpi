<template>
  <div class="targetlist">
    <div style="display: flex; justify-content: end; margin-bottom: 10px">
      <el-form>
        <el-form-item label="部门" prop="deptId">
          <el-select clearable placeholder="请选择" v-model="deptId">
            <el-option v-for="item in deptOptions" :key="item.deptId" :label="item.deptName" :value="item.deptId" />
          </el-select>
        </el-form-item>
      </el-form>

      <el-button @click="selectTargetByDept" type="primary">查询</el-button>
      <el-tooltip content="新增指标" placement="top" effect="light">
        <el-button type="success" @click="addNewTarget">
          <el-icon class="iconStyle"><Plus /></el-icon>新增
        </el-button>
      </el-tooltip>
      <el-tooltip content="刷新指标列表" placement="top" effect="light">
        <el-button type="primary" @click="getTargetList">
          <el-icon class="iconStyle"><Refresh /></el-icon>刷新
        </el-button>
      </el-tooltip>
    </div>

    <el-table :data="targetList1" border :height="tableHeight" style="width: 100%; text-align: center" type="index">
      <el-table-column type="index" label="序号" width="100" align="center" />
      <el-table-column prop="name" label="指标名称" />
      <el-table-column prop="targetValue" label="目标值" align="center"> </el-table-column>

      <el-table-column label="计算方法" prop="calculationMethod"></el-table-column>
      <el-table-column prop="dataProvider" align="center">
        <template #header
          ><div>数据<br />提供人</div></template
        >
      </el-table-column>
      <el-table-column prop="reportSource" label="报表源" />
      <el-table-column label="所属部门" prop="deptName">
        <!-- <template #default="scope">
          <span>{{ scope.row.deptName }}指标</span>
        </template> -->
      </el-table-column>

      <!-- <el-table-column label="指标维度" align="center">
        <template #default="scope">
          <span v-if="scope.row.targetIsNumber" style="color: #e6a23c">数量</span>
          <span v-else style="color: #409eff">百分比</span>
        </template>
      </el-table-column> -->

      <el-table-column prop="useState" label="是否使用" align="center">
        <template #default="scope">
          <span v-if="scope.row.useState == true" style="color: #f56c6c">使用中</span>
          <span v-if="scope.row.useState == false" style="color: #67c23a">未使用</span>
        </template>
      </el-table-column>
      <el-table-column label="指标区间" align="center" width="90">
        <template #default="scope">
          <el-button v-if="scope.row.edit" type="primary" size="small" circle @click="changeTarget(scope.row)"
            ><el-icon><Edit /></el-icon
          ></el-button>
          <el-tooltip
            v-else
            content="该指标被进行中的事件引用，暂不可修改，请在事件完成后进行修改。"
            placement="top"
            effect="light"
          >
            <el-button type="info" size="small" circle @click="changeTarget(scope.row)"
              ><el-icon><Edit /></el-icon></el-button
          ></el-tooltip>
        </template>
      </el-table-column>
      <el-table-column label="修改信息" width="90">
        <template #default="scope">
          <el-button v-if="scope.row.edit" type="primary" size="small" circle @click="changeTargetInfo(scope.row)"
            ><el-icon><Edit /></el-icon
          ></el-button>
          <el-tooltip
            v-else
            content="该指标被进行中的事件引用，暂不可修改，请在事件完成后进行修改。"
            placement="top"
            effect="light"
          >
            <el-button type="info" size="small" circle @click="changeTargetInfo(scope.row)"
              ><el-icon><Edit /></el-icon></el-button
          ></el-tooltip>
        </template>
      </el-table-column>
    </el-table>
    <el-dialog
      v-model="isAddTarget"
      :title="title"
      width="500px"
      :show-close="false"
      :close-on-click-modal="false"
      align-center
    >
      <el-form :model="formData" :rules="rules" label-width="120px">
        <el-form-item label="名称" prop="name">
          <el-input
            v-model="formData.name"
            clearable
            style="width: 214px"
            disabled
            v-if="title == '编辑指标'"
          ></el-input>
          <el-input
            v-model="formData.name"
            placeholder="请输入"
            style="width: 214px"
            clearable
            v-if="title == '新增指标' || title == '修改信息'"
          ></el-input>
        </el-form-item>
        <el-form-item label="权重" prop="weight" v-if="title == '新增指标'">
          <el-input
            v-model.number="formData.weight"
            clearable
            style="width: 214px"
            placeholder="权重请不要加百分号%"
          ></el-input>
        </el-form-item>
        <el-form-item label="目标值" prop="targetValue" v-if="title == '新增指标' || title == '修改信息'">
          <el-input v-model="formData.targetValue" clearable style="width: 214px" placeholder="请输入"></el-input>
        </el-form-item>
        <el-form-item label="计算方法" prop="calculationMethod" v-if="title == '新增指标' || title == '修改信息'">
          <el-input v-model="formData.calculationMethod" clearable style="width: 214px" placeholder="请输入"></el-input>
        </el-form-item>
        <el-form-item label="数据提供人" prop="dataProvider" v-if="title == '新增指标' || title == '修改信息'">
          <el-input v-model="formData.dataProvider" clearable style="width: 214px" placeholder="请输入"></el-input>
        </el-form-item>
        <el-form-item label="报表源" prop="reportSource" v-if="title == '新增指标' || title == '修改信息'">
          <el-input v-model="formData.reportSource" clearable style="width: 214px" placeholder="请输入"></el-input>
        </el-form-item>
        <el-form-item label="所属部门" prop="type" v-if="title == '新增指标'">
          <el-select clearable placeholder="请选择部门" v-model="formData.deptId">
            <el-option
              v-for="item in $store.state.deptOptions"
              :key="item.deptId"
              :label="item.deptName"
              :value="item.deptId"
            />
          </el-select>
        </el-form-item>
        <!-- <el-form-item label="指标维度" prop="dimensions" v-if="title == '新增指标'">
          <el-select clearable placeholder="请选择" v-model="formData.targetIsNumber" @change="handleChange">
            <el-option v-for="item in dimensionsOptions" :key="item.value" :label="item.label" :value="item.value"
          /></el-select>
        </el-form-item> -->

        <el-form-item label="指标区间" prop="score" v-if="title !== '修改信息'">
          <el-table :data="targetScoreScopePos" style="width: 250px">
            <el-table-column label="分数" prop="score" width="60"></el-table-column>
            <el-table-column :label="formData.targetIsNumber ? '区间最小完成数' : '区间最小值'" prop="min">
              <template #default="scope">
                <el-input v-model="scope.row.min"></el-input>
              </template>
            </el-table-column>
            <el-table-column :label="formData.targetIsNumber ? '区间最大完成数' : '区间最大值'" prop="max">
              <template #default="scope">
                <el-input v-model="scope.row.max"></el-input>
              </template>
            </el-table-column>
          </el-table>
          <div style="color: #f56c6c; font-size: 13px">注意：等于号在左边，例如0≤N&lt;30。</div>
        </el-form-item>

        <div style="text-align: right">
          <el-button @click="isAddTarget = false">取消</el-button>
          <el-button type="primary" @click="submitForm" v-if="title == '新增指标' || edit">确定</el-button>
          <el-button type="primary" @click="submitTargetInfo" v-if="title == '修改信息'">确定</el-button>
        </div>
      </el-form>
    </el-dialog>
  </div>
</template>

<script>
import { getTargetList, addTarget, selectTarget, changeTarget, changeTargetInfo } from "@/api/performance/index";
import { ElMessage } from "element-plus";
// import { deptList } from "@/api/register/index";
import { Refresh, Plus, Edit } from "@element-plus/icons-vue";
export default {
  name: "targetList",
  components: { Refresh, Plus, Edit },
  data() {
    return {
      targetList: [],
      targetList1: [],
      deptOptions: [],
      isAddTarget: false,
      targetName: "",
      targetDescription: "",
      weight: "",
      value: "", //判断是否是公共指标类型
      title: "", //弹窗名称
      formData: {
        deptId: "",
        name: "",
        weight: null,
        // value: null,
        targetValue: "",
        reportSource: "",
        targetIsNumber: null,
        dataProvider: "",
        calculationMethod: "",
      }, //弹窗数据
      edit: null, //判断是否能编辑指标
      targetIsNumber: null, //判断指标的维度，是百分比还是数量
      tableHeight: null,
      deptId: "", //绑定的部门id
      rules: {
        name: [{ required: true, message: "" }],
        type: [{ required: true, message: "" }],
        weight: [{ required: true, message: "" }],
        score: [{ required: true, message: "" }],
        // dimensions: [{ required: true, message: "" }],
        dataProvider: [{ required: true, message: "" }],
        reportSource: [{ required: true, message: "" }],
        targetValue: [{ required: true, message: "" }],
        calculationMethod: [{ required: true, message: "" }],
      },
      targetScoreScopePos: [
        { score: "1", min: null, max: null },
        { score: "2", min: null, max: null },
        { score: "3", min: null, max: null },
        { score: "4", min: null, max: null },
        { score: "5", min: null, max: null },
      ],
      // dimensionsOptions: [
      //   {
      //     value: true,
      //     label: "数量",
      //   },
      //   {
      //     value: false,
      //     label: "百分比",
      //   },
      // ],
    };
  },
  async mounted() {
    // await deptList()
    //   .then((res) => {
    //     if (res.data.code == 0) {
    //       this.deptOptions = res.data.data;
    //     }
    //   })
    //   .catch(() => {
    //     ElMessage.error("请求失败");
    //   });
    this.getTargetList();

    this.$nextTick(() => {
      // 根据浏览器高度设置初始高度
      this.tableHeight = window.innerHeight - 200;
      // 监听浏览器高度变化，改变表格高度
      window.onresize = () => {
        this.tableHeight = window.innerHeight - 200;
      };
    });
  },
  methods: {
    getTargetList() {
      getTargetList()
        .then((res) => {
          if (res.data && res.data.code == 0) {
            // let newItems = res.data.data.map((item) => {
            //   let matchedOption = this.deptOptions.find((item1) => item1.deptId == item.deptId);
            //   return Object.assign({}, item, { deptName: matchedOption ? matchedOption.deptName : "" });
            // });

            this.deptOptions = this.getUniqueDeptInfo(res.data.data);
            this.targetList = res.data.data;
            this.targetList1 = this.targetList;
            this.selectTargetByDept();
          }
        })
        .catch(() => {
          // ElMessage.error("获取数据失败");
        });
    },
    getUniqueDeptInfo(data) {
      // 创建一个Set来存储去重后的deptId
      const uniqueDeptIds = new Set();
      // 初始化结果数组
      const result = [];

      // 遍历数据数组
      data.forEach((item) => {
        // 检查deptId是否已经存在于Set中
        if (!uniqueDeptIds.has(item.deptId)) {
          // 如果不存在，则添加到Set中，并添加到结果数组
          uniqueDeptIds.add(item.deptId);
          result.push({ deptId: item.deptId, deptName: item.deptName });
        }
      });

      // 返回结果数组
      return result;
    },
    handleChange(value) {
      this.formData.targetIsNumber = value;
    },
    submitForm() {
      this.targetScoreScopePos = this.targetScoreScopePos.map((item) => ({
        ...item,
        min: parseFloat(item.min),
        max: parseFloat(item.max),
      }));
      let isAdd = false;
      if (this.title == "新增指标") {
        if (
          Object.values(this.formData)
            .map((item) => item === null || item === "" || item === undefined)
            .filter((item) => item).length > 0
        ) {
          ElMessage.error("请设置参数");
        } else if (typeof this.formData.weight !== "number" || Number(this.formData.weight) > 100) {
          ElMessage.error("权重必须为数字且不超过100，不带百分号");
        } else if (
          !this.targetScoreScopePos.every((item) => typeof item.min == "number" && typeof item.max == "number")
        ) {
          ElMessage.error("配置指标区间数据必须都是数字，请重新输入");
        } else {
          const targetScore = this.targetScoreScopePos.map((item) => Object.values(item));

          for (let i = 0; i < targetScore.length; i++) {
            if (targetScore[i][1] == targetScore[i][2]) {
              ElMessage.error("指标区间数据最小值和最大值不能相等，请修改");
              isAdd = true;
            }
            if (targetScore.length - 1 !== i) {
              if (targetScore[i][2] !== targetScore[i + 1][1]) {
                ElMessage.error("指标区间数据不连续，请修改");
                isAdd = true;
              }
            }
          }

          if (!isAdd) {
            // let lastValue = this.targetScoreScopePos[this.targetScoreScopePos.length - 1]["max"] + 1;
            // this.targetScoreScopePos[this.targetScoreScopePos.length - 1]["max"] = lastValue;
            this.formData.targetScoreScopePos = this.targetScoreScopePos;
            this.formData.common = false;
            this.formData.targetIsNumber = false;
            addTarget(this.formData, this);
          }
        }
      } else {
        const targetScore = this.targetScoreScopePos.map((item) => Object.values(item));

        for (let i = 0; i < targetScore.length; i++) {
          console.log(targetScore[4]);
          console.log(targetScore[i][3] == targetScore[i][4]);
          if (targetScore[i][3] == targetScore[i][4]) {
            ElMessage.error("指标区间数据最小值和最大值不能相等，请修改");
            isAdd = true;
          }
          if (targetScore.length - 1 !== i) {
            if (targetScore[i][4] !== targetScore[i + 1][3]) {
              ElMessage.error("指标区间数据不连续，请修改");
              isAdd = true;
            }
          }
        }
        if (!isAdd) {
          // let lastValue = this.targetScoreScopePos[this.targetScoreScopePos.length - 1]["max"] + 1;
          // this.targetScoreScopePos[this.targetScoreScopePos.length - 1]["max"] = lastValue;
          changeTarget(this.targetScoreScopePos, this);
        }
      }
    },
    submitTargetInfo() {
      const data = {
        calculationMethod: this.formData.calculationMethod,
        dataProvider: this.formData.dataProvider,
        name: this.formData.name,
        reportSource: this.formData.reportSource,
        targetId: this.formData.targetId,
        targetValue: this.formData.targetValue,
      };
      changeTargetInfo(data, this);
    },
    addNewTarget() {
      this.isAddTarget = true;
      this.title = "新增指标";
      (this.formData = {
        deptId: "",
        name: "",
        weight: null,
        targetValue: "",
        reportSource: "",
        targetIsNumber: null,
        dataProvider: "",
        calculationMethod: "",
      }),
        (this.targetScoreScopePos = [
          { score: "1", min: null, max: null },
          { score: "2", min: null, max: null },
          { score: "3", min: null, max: null },
          { score: "4", min: null, max: null },
          { score: "5", min: null, max: null },
        ]);
    },
    changeTarget(row) {
      this.title = "编辑指标";
      this.formData.name = row.name;

      this.edit = row.edit;
      this.formData.targetIsNumber = row.targetIsNumber;
      if (row.targetId != undefined) {
        this.isAddTarget = true;
        selectTarget(row.targetId).then((res) => {
          if (res.data.code == 0 && res.data.data.length > 0) {
            this.targetScoreScopePos = res.data.data;
            // let lastValue = this.targetScoreScopePos[this.targetScoreScopePos.length - 1]["max"] - 1;
            // this.targetScoreScopePos[this.targetScoreScopePos.length - 1]["max"] = lastValue;
          }
        });
      } else {
        ElMessage.error("缺少参数，请刷新页面");
      }
    },
    changeTargetInfo(row) {
      this.title = "修改信息";
      this.edit = false;
      this.formData = JSON.parse(JSON.stringify(row));
      this.isAddTarget = true;
    },
    //查询部门
    selectTargetByDept() {
      if (this.deptId !== "") {
        this.targetList1 = this.targetList.filter((item) => item.deptId == this.deptId);
      } else {
        this.targetList1 = this.targetList;
      }
    },
  },
};
</script>

<style lang="scss" scoped>
.targetlist {
  padding: 1rem;
  background-color: #fff;
  height: 95%;
  border-radius: 10px;

  .targetlist-title {
    display: flex;
    align-items: center;
    justify-content: space-between;
    text-align: left;
    padding: 1rem;
  }
}

.el-input {
  --el-input-height: var(--el-component-size);
  position: relative;
  font-size: var(--el-font-size-base);
  display: inline-flex;

  line-height: var(--el-input-height);
  box-sizing: border-box;
  vertical-align: middle;
}
.iconStyle {
  margin-right: 5px;
}
</style>
