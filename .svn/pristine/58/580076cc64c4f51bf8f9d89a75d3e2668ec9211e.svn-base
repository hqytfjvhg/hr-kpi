<template>
  <div>
    <!-- 文员的首页 -->
    <div class="clerk-page">
      <div style="width: 70%">
        <div class="clerk-todo">
          <div style="width: 50%">
            <div class="clerk-todo-title">
              <img src="@/assets/list.svg" alt="" class="clerk-todo-img" />
              待办事项
            </div>
            <!-- <div> -->
            <div v-if="isShowWriteValue" class="ulStyle">
              <span
                ><el-icon class="icon-color"><WarningFilled /></el-icon
                ><span class="text-style">请填写价值观</span></span
              >
              <router-link :to="{ name: 'writeValue' }" class="router-link">
                <span>去填写</span>
              </router-link>
            </div>
            <div v-if="isShowApprovalValue" class="ulStyle">
              <span
                ><el-icon class="icon-color"><WarningFilled /></el-icon
                ><span class="text-style">请审批价值观</span></span
              >
              <router-link :to="{ name: 'aboutInfo' }" class="router-link">
                <span>去审批</span>
              </router-link>
            </div>
            <div v-if="$store.state.number2 - $store.state.number > 0" class="ulStyle">
              <span
                ><el-icon class="icon-color"><WarningFilled /></el-icon>
                <span class="text-style">请审批业绩指标</span></span
              >
              <RouterLink :to="{ name: 'aboutInfo' }" class="router-link">
                <span>去审批</span>
              </RouterLink>
            </div>
            <div v-if="signNumber > 0" class="ulStyle">
              <span
                ><el-icon class="icon-color"><WarningFilled /></el-icon
                ><span class="text-style">请确认绩效月考评表</span></span
              >
              <RouterLink :to="{ name: 'signatureVisual' }" class="router-link">
                <span>去确认</span>
              </RouterLink>
            </div>
            <div
              v-if="$store.state.number === 0 && $store.state.number2 === 0 && signNumber === 0"
              style="margin-top: 100px"
            >
              暂无待办事件
            </div>
          </div>
          <!-- <el-calendar
            v-model="value"
            style="width: 55%; margin-top: 5px; border-left: 1px solid rgba(245, 242, 242, 1); margin-left: 2vw"
            ><template #header="{ date }">
              <img src="@/assets/time.svg" style="width: 3vh; height: 3vh; margin-right: 0.5vw" alt="" />
              <span style="font-size: 17px; font-weight: 700">{{ date }}</span></template
            >
          </el-calendar> -->
          <CalendarView
            style="
              width: 55%;
              height: 100%;
              margin-left: 2vw;
              border-left: 1px solid rgba(245, 242, 242, 1);
              border-radius: 10px;
            "
          ></CalendarView>
        </div>
        <div style="width: 100%; margin-top: 15px">
          <el-card shadow="never" class="card-style">
            <template #header>
              <div class="card-header">
                <span>{{ year }}年个人全年绩效情况</span>
              </div>
            </template>
            <div v-if="xAxisOneYear.length == 0" style="width: 100%; height: 400px">暂无数据</div>
            <div id="EChartAllYearKPI" style="width: 100%; height: 400px" v-else></div>
          </el-card>
        </div>
      </div>
      <div style="width: 28%">
        <el-card style="text-align: left; border-radius: 10px; height: 325px" shadow="never">
          <template #header>
            <div class="card-header" v-if="oneselfKPIAndBonus.length > 0">
              <span>{{ oneselfKPIAndBonus[oneselfKPIAndBonus.length - 1].month }}</span>
            </div>
          </template>
          <div>
            <div v-if="oneselfKPIAndBonus.length > 0" class="cardBodyStyle">
              <div class="cardImgStyle">
                <el-tooltip content="价值观得分" placement="top" effect="light">
                  <img src="@/assets/value.svg" class="imgStyle"
                /></el-tooltip>
                <div class="textStyle">
                  {{ oneselfKPIAndBonus[oneselfKPIAndBonus.length - 1].valueScore }}
                </div>
              </div>
              <div class="cardImgStyle">
                <el-tooltip content="KPI得分" placement="top" effect="light">
                  <img src="@/assets/KPI.svg" class="imgStyle"
                /></el-tooltip>
                <div class="textStyle">
                  {{ oneselfKPIAndBonus[oneselfKPIAndBonus.length - 1].kpi }}
                </div>
              </div>
              <div class="cardImgStyle">
                <el-tooltip content="奖金系数" placement="top" effect="light">
                  <img src="@/assets/bonus.svg" class="imgStyle"
                /></el-tooltip>
                <div class="textStyle">{{ oneselfKPIAndBonus[oneselfKPIAndBonus.length - 1].bonusCoefficient }}%</div>
              </div>
            </div>

            <div v-else style="margin-top: 100px; text-align: center">暂无数据</div>
          </div>
        </el-card>

        <el-card style="text-align: left; border-radius: 10px; margin-top: 15px" shadow="never">
          <template #header>
            <div class="card-header">
              <span>未填写价值观名单</span>
              <span>
                <span style="color: #909399; font-size: small">{{ noWriteValueList.length }}人未填</span>
                <span style="margin-left: 8px; color: #e6a23c">
                  <el-tooltip effect="light" placement="top" content="刷新">
                    <i class="fa fa-repeat" aria-hidden="true" @click="getNoWriteValueList" /></el-tooltip></span
              ></span>
            </div>
          </template>
          <div>
            <el-table :data="noWriteValueList" height="150px">
              <el-table-column label="部门" prop="deptName"></el-table-column
              ><el-table-column label="姓名" prop="userName"></el-table-column>
            </el-table>
          </div>
        </el-card>
        <el-card style="text-align: left; border-radius: 10px; margin-top: 15px" shadow="never">
          <template #header>
            <div class="card-header">
              <span>未确认绩效名单</span>
              <span>
                <span style="color: #909399; font-size: small">{{ noSignList.length }}人未签</span>
                <span style="margin-left: 8px; color: #e6a23c">
                  <el-tooltip effect="light" placement="top" content="刷新">
                    <i class="fa fa-repeat" aria-hidden="true" @click="getNoSignList" /></el-tooltip></span
              ></span>
            </div>
          </template>
          <div>
            <el-table :data="noSignList" height="150px">
              <el-table-column label="部门" prop="deptName"></el-table-column
              ><el-table-column label="姓名" prop="userName"></el-table-column>
            </el-table>
          </div>
        </el-card>
      </div>
      <div></div>
    </div>

    <!-- 图表 -->
    <!-- <div style="display: flex; justify-content: space-between; margin-top: 15px"></div> -->
  </div>
</template>

<script>
import * as echarts from "echarts";
import { WarningFilled } from "@element-plus/icons-vue";
import store from "../../store";
import { ElMessage } from "element-plus";
import "font-awesome/css/font-awesome.min.css";
import {
  getSelfPerformanceInfo,
  getOneselfAllYear,
  getNoWriteValueList,
  getNoSignList,
} from "@/api/visualization/index";
import { getEventNumber, selectPerformanceInfo } from "@/api/about/index";
import CalendarView from "../calendar/CalendarView.vue";

export default {
  components: { WarningFilled, CalendarView },
  data() {
    return {
      userName: "111",
      year: new Date().getFullYear(),
      deptYear: new Date().getFullYear(),
      month: new Date().getMonth() + 1,
      criticalMonth: "",
      day: new Date().getDate(),
      value: new Date(),
      performanceData: {}, //业绩
      xAxisOneYear: [], //整年的x轴
      yAxisKPI: [], //整年的y轴
      yAxisBonus: [], //整年的y轴
      yAxisValue: [], //个人全年价值观的数据
      KPIScroe: null, //最新月份的数据
      valueScroe: null,
      performanceScroe: null,
      deptAllUser: [], //本部门所有人员
      newestMonth: "", //当前用户查看已保存的最新月
      newestEventNoInfo: false, //判断最新月份是否有数据
      signNumber: null, //判断是否有签名的事件
      yearOptions: [],

      oneselfKPIAndBonus: [], //最新两月的数据
      kpiYearAverage: 0, //全年平均
      bonusYearAverage: 0,
      valueYearAverage: 0,
      count: 0,
      deptCount: 0,
      isShowWriteValue: false, //判断是否显示去填写价值观
      isShowApprovalValue: false, //判断是否显示审批价值观
      noWriteValueList: [], //价值观未填写名单
      noSignList: [], //未签名名单
    };
  },
  created() {
    document.title = "面板-绩效";
  },
  async mounted() {
    await getEventNumber()
      .then((res) => {
        if (res.data.code == 0) {
          //价值观待办事件数量
          if (res.data.data.result.find((item) => item.deptFlowState === 0 && item.hrFlowState === 0)) {
            this.isShowWriteValue = true;
          }
          if (res.data.data.result.find((item) => !(item.deptFlowState === 0 && item.hrFlowState === 0))) {
            this.isShowApprovalValue = true;
          }
          store.commit("changeNumber", res.data.data.uncompletedEventNumber);
          store.commit("changeValueResult", res.data.data.result);

          //业绩待办事件数量
          selectPerformanceInfo().then((res) => {
            if (res.data.code == 0) {
              store.commit("changeNumber2", res.data.data.uncompletedEventNumber);
              store.commit("saveMonth", { month: res.data.data.month });
            }
          });
        }
      })
      .catch((e) => {
        console.log(e);
        ElMessage.error("请求失败");
      });

    let nowDate = new Date();
    if (0 < nowDate.getDate() && nowDate.getDate() <= 15) {
      this.criticalMonth = nowDate.getMonth();
      if (this.criticalMonth == 0) {
        this.criticalMonth = 12;
        this.year = nowDate.getFullYear() - 1;
        this.deptYear = nowDate.getFullYear() - 1;
      }
    } else if (15 < nowDate.getDate() && nowDate.getDate() < 32) {
      this.criticalMonth = nowDate.getMonth() + 1;
    }
    for (let i = 2021; i <= this.year + 1; i++) {
      this.yearOptions.push(i);
    }
    store.commit("saveYear", this.year);
    store.commit("saveCriticalMonth", this.criticalMonth);
    store.commit("saveYearOptions", this.yearOptions);

    this.year = store.state.year;
    this.deptYear = store.state.year;
    this.month = store.state.criticalMonth;

    this.getSelfPerformanceData();
    this.getAllYearKPI({ year: this.year });
    this.getNoWriteValueList();
    this.getNoSignList();
  },
  methods: {
    //获取整年KPI
    getAllYearKPI(data) {
      getOneselfAllYear(data).then((res) => {
        if (res.data.code == 0 && res.data.data.length > 0) {
          this.count = 2;

          res.data.data.sort((a, b) => a.month - b.month);
          this.xAxisOneYear = res.data.data.map((item) => item.month + "月");
          this.yAxisKPI = res.data.data.map((item) => item.kpi);
          this.yAxisBonus = res.data.data.map((item) => item.bonusCoefficient);
          this.yAxisValue = res.data.data.map((item) => item.valueScore);
          this.yAxisKPI.map((item) => {
            this.kpiYearAverage += Number(item);
          });

          this.yAxisBonus.map((item) => {
            this.bonusYearAverage += Number(item);
          });
          this.yAxisValue.map((item) => {
            this.valueYearAverage += Number(item);
          });
          const kpi = (this.kpiYearAverage.toFixed(2) / this.yAxisKPI.length).toFixed(2);
          this.oneselfKPIAndBonus.push({
            kpi: kpi,
            bonusCoefficient: (this.bonusYearAverage / this.yAxisBonus.length).toFixed(0),
            valueScore: (this.valueYearAverage / this.yAxisValue.length).toFixed(0),
            month: "全年平均（个人）",
          });
          this.$nextTick(() => {
            this.getRenderer();
          });
        } else if (res.data.code == 0 && res.data.data.length == 0) {
          //第一年没有数据，请求上一年的数据，在1月份会出现
          this.count += 1;

          if (this.count == 1) {
            this.year = this.year - 1;
            this.getAllYearKPI({ year: this.year });
            // if (store.state.role == "DEPTMANAGER" || store.state.role == "HRMANAGER") {
            //   this.getDeptAllUserKPI({ year: this.year });
            // }
          } else {
            //假设两年都没有数据，年份显示当前年，初始使用时会出现
            this.year = this.year + 1;
          }
          // console.log(this.count);
        }
      });
    },
    getRenderer() {
      // let EChartAllYearKPI = initEChart("EChartAllYearKPI");
      //整年绩效分析
      let EChartAllYearKPI = echarts.init(document.getElementById("EChartAllYearKPI"));
      //控制文本的字段
      const labelOption = {
        show: true,
        position: "top",
        // distance: 15,
        // align: "left",
        // verticalAlign: "middle",
        // rotate: 90,
        //每个数据显示出来，位置在底部里面，旋转了90度，c是y轴的数值，b是x轴的数值，a没有内容
        formatter: "{c}",
        //文字大小
        fontSize: 18,
        color: "black",
      };
      const seriesOption = {
        type: "line",
        barGap: 0, //条间隙
        label: labelOption,
        //鼠标触碰的数据的样式，突出当前的颜色，其他的暗下去
        emphasis: {
          focus: "series",
        },
      };
      const series = [
        {
          name: "价值观得分",
          data: this.yAxisValue,
          yAxisIndex: 0, // 指定使用左侧Y轴
          ...seriesOption,
        },
        {
          name: "KPI得分",
          data: this.yAxisKPI,
          yAxisIndex: 0, // 指定使用左侧Y轴
          ...seriesOption,
        },
        { name: "奖金系数", data: this.yAxisBonus, yAxisIndex: 1, ...seriesOption },
      ];
      let option = {
        tooltip: {
          trigger: "axis",
          axisPointer: {
            type: "shadow",
          },
        },
        // 外面颜色的标记，默认是top-center，不设置data也有数据，前提是series有设置name属性
        legend: {
          data: ["价值观得分", "KPI得分", "奖金系数"],
        },
        // 工具box，可以转换数据的样式
        toolbox: {
          show: true,
          orient: "vertical",
          left: "right",
          top: "center",
          feature: {
            mark: { show: true },
            //数据视图
            // dataView: { show: true, readOnly: false },
            //刷新
            restore: { show: true },
            //转换数据的类型，折现、柱状、堆叠
            magicType: { show: true, type: ["bar"] },

            //下载
            // saveAsImage: { show: true },
          },
        },
        xAxis: [
          {
            type: "category",
            axisTick: { show: false }, //刻度线
            data: this.xAxisOneYear,
            nameLocation: "start",
            nameGap: 0,
            axisLabel: {
              interval: 0, // 显示所有标签（默认可能会间隔显示）
              align: "center", // 标签居中显示（对于 category 类型的 X 轴，默认就是居中）
            },
            boundaryGap: true, // 坐标轴两端留白
          },
        ],
        yAxis: [
          {
            type: "value",
            name: "得分", // 左侧Y轴名称
            position: "left", // 左侧位置
            min: 0, // 可根据实际情况设置最小值
            max: 25, // 或者自定义最大值
            axisLabel: {
              // show: false,
              formatter: "{value}", // 刻度标签格式化函数，这里直接显示数值
            },
            splitLine: { show: false },
            nameTextStyle: {
              padding: [0, 20, 5, 0], // 上右下左的内边距，尝试调整这里的值以接近居中效果
              lineHeight: 10, // 行高，可以根据实际情况调整
              align: "center", // 文本水平居中
              verticalAlign: "bottom", // 文本垂直居底部，尽可能靠近轴线
            },
          },
          {
            type: "value",
            name: "奖金系数", // 右侧Y轴名称
            position: "right", // 右侧位置
            // data: [0, 80, 100, 120, 140],
            min: 0, // 对于数据差距较大的情况，可能需要手动设定合适的刻度范围
            max: 145,
            // interval: 50,
            axisLabel: {
              // show: false,
              formatter: "{value}",
            },
            splitLine: { show: false }, // 可选，不显示右侧Y轴的网格线（如果不需要）
            nameTextStyle: {
              padding: [0, 0, 5, 25], // 上右下左的内边距，尝试调整这里的值以接近居中效果
              lineHeight: 10, // 行高，可以根据实际情况调整
              align: "center", // 文本水平居中
              verticalAlign: "bottom", // 文本垂直居底部，尽可能靠近轴线
            },
          },
        ],
        grid: {
          left: "3%",
          right: "3%",
          bottom: "3%",
          containLabel: true,
        },
        series: series,
      };
      option && EChartAllYearKPI.setOption(option);

      window.addEventListener("resize", function () {
        EChartAllYearKPI.resize();
      });
    },

    //获取本人有无签名的待办事件
    getSelfPerformanceData() {
      getSelfPerformanceInfo().then((res) => {
        if (res.data.code == 0 && res.data.data.name !== null && res.data.data.signName == null) {
          this.signNumber = 1;
        } else {
          this.signNumber = 0;
        }
      });
    },

    //文员查看价值观未填写的名单
    getNoWriteValueList() {
      getNoWriteValueList().then((res) => {
        if (res.data.code == 0) {
          this.noWriteValueList = res.data.data;
        }
      });
    },
    //文员查看绩效未签名名单
    getNoSignList() {
      getNoSignList().then((res) => {
        if (res.data.code == 0) {
          this.noSignList = res.data.data;
        }
      });
    },
  },
};
</script>

<style lang="scss" scoped>
.el-calendar {
  --el-calendar-cell-width: 35px;
  --el-calendar-border: none;
  // .el-calendar-table td {
  //   font-size: small;
  // }
  .el-calendar__body {
    padding: 12px 15px;
  }
}
:deep(.el-calendar .el-calendar__header) {
  display: flex;
  align-items: center !important;
  justify-content: start;
}
:deep(.el-card__body) {
  padding: 10px 20px;
}
.card-style {
  text-align: left;
  border-radius: 10px;
}
.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  justify-items: center;
  // font-size: 17px;
  font-weight: 700;
  color: "#777";
  // height: 40px;
}

.cardBodyStyle {
  font-size: 1.3vw;
  width: 100%;
  text-align: center;
  margin-top: 20px;
  .cardImgStyle {
    display: flex;
    align-items: center;
    margin-bottom: 2vh;
    justify-content: space-between;
    padding: 0 3vw;
  }
  .cardImgStyle:last-child {
    margin-bottom: 0;
  }
  .textStyle {
    color: black;
    font-weight: 700;
    font-size: 2.3vw;
    width: 7vw;
    text-align: left;
    // margin-left: 3vw;
  }
  .imgStyle {
    width: 6vw;
    height: 6vh;
  }
}

.ulStyle {
  margin-left: 2vw;
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  min-width: 160px;
  font-size: clamp(11px, 1.2vw, 17px);
  margin-bottom: 10px;
  white-space: nowrap;
  word-wrap: normal;

  span {
    margin-right: 2vw;
    font-size: clamp(11px, 1.2vw, 17px);
  }
  .icon-color {
    color: #e6a23c;
  }
  .text {
    margin-left: 1vw;
  }
  .router-link {
    color: #409eff;
    text-decoration: none;
  }
}

.clerk-page {
  display: flex;
  justify-content: space-between;
  .clerk-todo {
    border-radius: 10px;
    background-color: #fff;
    display: flex;
    width: 100%;
    border: 1px solid #ebeef5;
    .clerk-todo-title {
      margin: 2vh 0 2vh 2vw;
      min-width: 112px;
      font-size: 17px;
      font-weight: 600;
      display: flex;
      align-items: center;
      .clerk-todo-img {
        width: 3vh;
        height: 3vh;
        margin-right: 0.5vw;
      }
    }
  }
}
</style>
