<template>
  <div class="values">
    <div class="values-title" v-if="valuesData[0]">正在审批【{{ valuesData[0].name }}】{{ month }}月份的价值观</div>
    <el-progress
      style="width: 80%; margin: auto"
      :text-inside="true"
      :stroke-width="15"
      :percentage="currentIndex * (100 / valuesData.length)"
    />
    <div class="block text-center" style="width: 80%; margin: auto">
      <el-carousel
        trigger="click"
        arrow="always"
        :autoplay="false"
        :loop="false"
        indicator-position="outside"
        @change="handleChange"
        height="68vh"
      >
        <el-carousel-item v-for="(item, index) in valuesData" :key="index">
          <el-row class="valuesTitle">
            <el-col :span="10" style="text-align: left; padding-left: 10px"
              >价值观名称:{{ item.valueDescription }}</el-col
            >
            <el-col :span="3">自评得分</el-col>
            <el-col :span="state == true ? 6 : 4" v-if="state == false">部门审批</el-col>
            <el-col :span="state == true ? 5 : 3">上一步审批得分</el-col>

            <el-col :span="6" v-if="state == true">部门负责人审批得分</el-col>
            <el-col :span="state == true ? 6 : 4" v-if="state == false">人事行政部</el-col>
          </el-row>
          <div class="scroll">
            <el-row class="valuesAction" v-for="(item1, index1) in item['actionList']" :key="index1">
              <el-col :span="10" align="center">
                <div style="text-align: left; padding-left: 10px">
                  {{ index1 + 1 }}. {{ item1.actionDescription }}
                  <div style="padding: 0.5rem 0; font-size: 0.8rem; color: gray">案例：{{ item1.example }}</div>
                </div>
              </el-col>
              <!-- 自评 -->
              <el-col :span="3">
                {{ item1.selfScore }}
              </el-col>
              <!-- 人事审批看到部门审批的 -->
              <el-col :span="state == true ? 6 : 4" v-if="state == false">
                部门审批最终分数： {{ item1.leaderScore }}
                <div
                  class="remarkStyle"
                  v-for="(remark, index) in item1.deptremark"
                  :key="index"
                  style="text-align: center; color: gray"
                >
                  {{ remark }}
                  <br />
                </div>
              </el-col>
              <!-- 看到上一个人的，假如当前是第一个就显示0 -->
              <el-col :span="5" v-if="state">
                <!-- <span v-if="isDeptFirst"> {{ item1.currentLeaderScore }}</span> -->
                <span>{{ item1.leaderScore }}</span>
              </el-col>
              <el-col :span="state == true ? 5 : 3" v-else>{{ item1.hrScore }}</el-col>

              <!-- 修改评分 -->
              <el-col :span="state == true ? 6 : 4">
                <span v-if="$store.state.role == 'DEPTMANAGER' || $store.state.role == 'HRMANAGER'">
                  <el-radio-group v-model="item1.currentLeaderScore" v-if="state">
                    <el-radio-button :label="0" :value="0" />
                    <el-radio-button :label="1" :value="1" />
                  </el-radio-group>
                  <el-radio-group v-model="item1.currentHrScore" v-if="!state">
                    <el-radio-button :label="0" :value="0" />
                    <el-radio-button :label="1" :value="1" />
                  </el-radio-group>
                </span>
                <!-- 没有修改权限的只能看到评分 -->
                <span v-else>
                  <span v-if="state && !isDeptFirst">{{ item1.leaderScore }}</span>
                  <span v-else-if="state && isDeptFirst">{{ item1.currentLeaderScore }}</span>
                  <span v-else>{{ item1.hrScore }}</span>
                </span>
                <div style="padding: 0.5rem">
                  <el-input
                    type="textarea"
                    placeholder="审批备注"
                    v-model="item1.deptRemark"
                    v-if="state == true"
                    id="input"
                  ></el-input>
                  <el-input type="textarea" placeholder="备注" v-model="item1.hrRemark" v-else id="input"></el-input>
                  <!-- 所有审批人的备注 -->
                  <el-popover placement="top" :width="200" trigger="hover">
                    <span v-for="(remark, index) in item1.remark" :key="index">
                      {{ remark }}
                      <span v-if="index !== item1.remark.length - 1">。</span>
                    </span>
                    <template #reference>
                      <div class="remarkStyle" v-for="(remark, index) in item1.remark" :key="index">
                        {{ remark.length > 20 ? remark.slice(0, 20) + "..." : remark }}
                        <br v-if="index !== item1.remark.length - 1" />
                      </div>
                    </template>
                  </el-popover>
                </div>
              </el-col>
            </el-row>
            <el-row style="padding: 1rem 0">
              <el-col :span="8">
                <el-tag type="primary">自评总分： {{ item.valueSelfTotalScore }}</el-tag>
              </el-col>
              <el-col :span="8">
                <el-tag type="primary">部门审批总分： {{ item.valueLeaderTotalScore }}</el-tag>
              </el-col>
              <el-col :span="8">
                <el-tag type="primary">人事审批总分： {{ item.valueHrTotalScore }}</el-tag>
              </el-col>
            </el-row>
          </div>
        </el-carousel-item>
      </el-carousel>
    </div>
    <el-button @click="sendValuesForm" v-if="currentIndex * (100 / valuesData.length) == 100">提交</el-button>
  </div>
</template>

<script>
import { getValueByUserId, sendLeaderScore } from "@/api/about/index";
import store from "@/store";
import router from "@/router";
import emitter from "@/utils/eventbus.js";

import { ElMessage, ElMessageBox } from "element-plus";
// import axios from "axios";
export default {
  data() {
    return {
      valuesData: {},
      currentIndex: 1,
      updatedValues: {},
      leaderScore: 0, //部门评分
      hrScore: 0, //人事评分
      valueList: [],
      state: "", //是否是部门审批
      userId: store.state.currentUserId,
      remark: [], //展示前面审批人的备注
      allRemark: "", //暂存所有的备注
      isDeptFirst: false,
      month: null, //月份
    };
  },
  created() {
    this.getValuesData();
    this.month = new Date().getMonth() + 1;
  },
  activated() {
    this.getValuesData();
    this.month = new Date().getMonth() + 1;
  },
  methods: {
    // 根据不同身份获取价值观数据
    getValuesData() {
      // console.log(this.userId);
      getValueByUserId(this.userId)
        .then((res) => {
          // const tableData = Object.values(res.data.data);
          // this.valuesData = tableData[0];
          // console.log(res.data.data);
          if (res.data.code == 0) {
            this.valuesData = res.data.data.result;
            this.state = res.data.data.isDeptFlow;
            this.valuesData.map((item) => {
              item.actionList.map((action) => {
                if (action.example == null) {
                  action.example = "未填写";
                }
                //部门进入
                if (this.state) {
                  //如果是第一位
                  if (action.deptRemark == null || action.deptRemark == "") {
                    this.isDeptFirst = true;
                    action.currentLeaderScore = action.selfScore;
                    // action.leaderScore = action.selfScore;
                  } else {
                    action.currentLeaderScore = action.leaderScore;
                    let remarkArr = action.deptRemark.split("$");
                    // console.log(remarkArr, 1111);
                    action.remark = remarkArr;
                    // action.remark = remarkArr.join("。");
                    // console.log(action.remark);
                    action.deptRemark = null;
                  }
                  //人事进入
                } else {
                  let remarkArr = [];
                  if (action.hrRemark == null || action.hrRemark == "") {
                    //人事第一位审批上一位审批人的分数是部门的最终分数
                    action.hrScore = action.leaderScore;
                    //定位上一位的分数
                    action.currentHrScore = action.hrScore;

                    let deptremark = action.deptRemark.split("$");
                    action.deptremark = deptremark;
                  } else {
                    //不是第一位审批人就直接等于上一位的分数
                    action.currentHrScore = action.hrScore;
                    remarkArr = action.hrRemark.split("$");
                    let deptremark = action.deptRemark.split("$");
                    // remarkArr = remarkArr.concat();
                    action.deptremark = deptremark;
                  }
                  console.log(remarkArr, 1111);
                  action.remark = remarkArr;
                  action.hrRemark = null;
                }
                return action;
              });
              return item;
            });
          }
          // console.log(this.allRemark);

          console.log(this.valuesData);
        })
        .catch(() => {
          ElMessage.error("请求失败");
        });
    },
    handleChange(index) {
      this.currentIndex = index + 1;
    },
    sendValuesForm() {
      ElMessageBox.confirm("是否确定已审批完并提交此人的价值观？", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning",
      })
        .then(() => {
          let newArray = [];
          const leaderData = this.valuesData.map((item) => {
            const list = item.actionList.map((action) => {
              let remark = action.remark ? action.remark.join("$") : "";
              let deptRemark = action.deptRemark == null ? "未备注" : action.deptRemark;
              let hrRemark = action.hrRemark == null ? "未备注" : action.hrRemark;
              if (this.state) {
                return {
                  dataId: action.dataId,
                  deptRemark: remark + store.state.name + ":" + deptRemark + "$",
                  leaderScore: action.currentLeaderScore,
                };
              } else {
                return {
                  dataId: action.dataId,
                  hrRemark: remark + store.state.name + ":" + hrRemark + "$",
                  hrScore: action.currentHrScore,
                };
              }
            });
            list.forEach((action) => {
              newArray.push(action);
            });
            console.log(store.state.todoList);
            return {
              month: item.month,
              userId: store.state.currentUserId,
              year: item.year,
              list: newArray,
              deptFlowState: store.state.currentState,
            };
          });
          console.log("提交数据", leaderData[0]);
          // leaderData.map((item, index) => {
          //   leaderScore[index] = item;
          // });

          sendLeaderScore(leaderData[0]);
          //提交完后刷新个人信息的函数
          emitter.on("callBPageMethod", (func) => {
            func();
            console.log("执行了");
          });
          router.replace({ name: "aboutInfo" });
        })
        .catch(() => {
          ElMessage.info("取消提交");
        });
    },
  },
};
</script>
<style>
.values {
  padding: 17px;
  background-color: #fff;
  height: 95%;
  border-radius: 10px;
}

.values-title {
  display: flex;
  align-items: center;
  justify-content: space-between;
  text-align: left;
  padding: 1rem;
  color: #f56c6c;
}
.el-progress {
  padding-bottom: 0.5rem;
}

.el-carousel__item h3 {
  color: #475669;
  opacity: 0.75;
  margin: 0;
  text-align: left;
}

.scroll {
  height: 80%;
  display: block;
  overflow-y: auto;
  /* padding-bottom: 1rem; */
}

.valuesTitle {
  /* height: 4rem; */
  line-height: 4rem;
  font-weight: 700;
}
.valuesAction {
  margin-top: 0.5rem;
  border-bottom: rgba(234, 234, 239, 0.5) solid 1px;
}
.valuesAction .el-col:nth-child(2),
.valuesAction .el-col:nth-child(3),
.valuesAction .el-col:nth-child(4),
.valuesAction .el-col:nth-child(5) {
  line-height: 2rem;
}
.remarkStyle {
  text-align: left;
  font-size: small;
}
</style>
