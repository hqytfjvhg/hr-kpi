<template>
  <div class="valuesTable">
    <div class="valuesTableTitle">查询部门价值观</div>
    <el-form :rules="rules">
      <el-form-item label="年份" prop="year">
        <el-select placeholder="请选择年份" v-model="year">
          <el-option v-for="item in yearOptions" :key="item" :label="item" :value="item" />
        </el-select>
      </el-form-item>
      <el-form-item label="月份" prop="month">
        <el-select placeholder="请选择月份" v-model="month">
          <el-option v-for="item in monthOptions" :key="item.monthId" :label="item.month" :value="item.monthId" />
        </el-select>
      </el-form-item>
      <el-form-item label="部门" prop="deptId">
        <el-select clearable placeholder="请选择部门" v-model="deptId">
          <el-option v-for="item in deptOptions" :key="item.deptId" :label="item.deptName" :value="item.deptId" />
        </el-select>
      </el-form-item>
      <el-form-item label="姓名"><el-input placeholder="请输入查询的姓名" v-model="name"></el-input></el-form-item>
      <el-button @click="getValuesDeptList">查询</el-button>
    </el-form>

    <el-table :data="tableData" border height="70vh">
      <el-table-column label="详情" type="expand" width="80">
        <template #default="scope">
          <div style="padding: 20px">
            <el-table
              :data="scope.row.list"
              :span-method="objectSpanMethod"
              border
              show-summary
              sum-text="总分"
              style="width: 100%"
            >
              <el-table-column label="序号" type="index" width="50"></el-table-column>
              <el-table-column label="价值观" prop="valuDescription"></el-table-column>
              <el-table-column label="行为" prop="actionDescription"></el-table-column>
              <el-table-column label="案例" prop="example"></el-table-column>
              <el-table-column label="自评" prop="selfScore" width="50"></el-table-column>
              <el-table-column label="部门" prop="leaderScore" width="50"></el-table-column>
              <el-table-column label="人事" prop="hrScore" width="50"></el-table-column>
              <el-table-column label="部门审批备注">
                <template #default="scope">
                  <el-popover placement="top" :width="300" trigger="hover">
                    <div v-if="scope.row.deptRemark != null">{{ scope.row.deptRemark.replace(/\$/g, "。") }}</div>
                    <template #reference>
                      <div v-if="scope.row.deptRemark != null" style="font-size: 10px; color: gray">
                        <span v-for="(item, index) in scope.row.deptRemark.split('$')" :key="index" class="myNote">
                          {{ item }}
                          <br v-if="index !== scope.row.deptRemark.split('$').length - 1" />
                        </span>
                      </div>
                    </template>
                  </el-popover>
                </template>
              </el-table-column>
              <el-table-column label="人事审批备注">
                <template #default="scope">
                  <el-popover placement="top" :width="300" trigger="hover">
                    <div v-if="scope.row.hrRemark != null">{{ scope.row.hrRemark.replace(/\$/g, "。") }}</div>
                    <template #reference>
                      <div v-if="scope.row.hrRemark != null" style="font-size: 10px; color: gray">
                        <span v-for="(item, index) in scope.row.hrRemark.split('$')" :key="index" class="myNote">
                          {{ item }}
                          <br v-if="index !== scope.row.hrRemark.split('$').length - 1" />
                        </span>
                      </div>
                    </template>
                  </el-popover>
                </template>
              </el-table-column>
            </el-table>
          </div>
        </template>
      </el-table-column>
      <el-table-column label="年份" prop="year"></el-table-column>
      <el-table-column label="月份" prop="month"></el-table-column>
      <el-table-column label="姓名" prop="name"></el-table-column>
    </el-table>
  </div>
</template>

<script>
import axios from "axios";
import { ElConfigProvider, ElMessage } from "element-plus";
import { deptList } from "@/api/register/index";
import store from "@/store";
// import store from "@/store";

export default {
  name: "valueDept",
  data() {
    return {
      tableData: [],
      year: "",
      month: "",
      deptId: 1,
      name: "",
      deptOptions: [],
      yearOptions: [],

      monthOptions: [
        { monthId: 1, month: "一月" },
        { monthId: 2, month: "二月" },
        { monthId: 3, month: "三月" },
        { monthId: 4, month: "四月" },
        { monthId: 5, month: "五月" },
        { monthId: 6, month: "六月" },
        { monthId: 7, month: "七月" },
        { monthId: 8, month: "八月" },
        { monthId: 9, month: "九月" },
        { monthId: 10, month: "十月" },
        { monthId: 11, month: "十一月" },
        { monthId: 12, month: "十二月" },
      ],
      rules: {
        year: [{ required: true, message: "请选择年份", trigger: "blur" }],
        month: [{ required: true, message: "请选择月份", trigger: "blur" }],
        deptId: [{ message: "请选择部门", trigger: "blur" }],
      },
    };
  },
  components: {
    [ElConfigProvider.name]: ElConfigProvider,
  },
  created() {
    this.nowtime();
    // this.getValuesDeptList();
    deptList()
      .then((res) => {
        if (res.data.code == 0) {
          this.deptOptions = res.data.data;
        }
      })
      .catch(() => {
        ElMessage.error("请求失败");
      });
  },
  methods: {
    //获取当前时间
    nowtime() {
      let nowDate = new Date();
      this.year = nowDate.getFullYear();
      this.month = nowDate.getMonth() + 1;
      for (let i = 2021; i <= this.year; i++) {
        this.yearOptions.push(i);
      }
    },
    //获取部门价值观列表
    getValuesDeptList() {
      axios({
        url: "/api/ifi-personal/valueData/searchValueDataHistoryRecords",
        method: "post",
        headers: {
          token: store.state.token,
        },
        data: { year: this.year, month: this.month, deptId: this.deptId, name: this.name },
      })
        .then((res) => {
          if (res.data.code == 0 && JSON.stringify(res.data.data) !== "{}") {
            //重组数据
            const tableData = Object.values(res.data.data);
            // console.log(tableData);
            this.tableData = tableData.map((item) => {
              // console.log(item);
              const list = item.map((item) => {
                return {
                  valuDescription: item.valuDescription,
                  actionDescription: item.actionDescription,
                  selfScore: item.selfScore,
                  example: item.example,
                  // valueTotalScore: item.valueTotalScore,
                  leaderScore: item.leaderScore,
                  hrScore: item.hrScore,
                  deptRemark: item.deptRemark,
                  hrRemark: item.hrRemark,
                };
              });
              return {
                name: item[0].name,
                year: item[0].year,
                month: item[0].month,
                list: list,
              };
            });
            console.log(this.tableData);
          } else if (res.data.code == 0 && JSON.stringify(res.data.data) == "{}") {
            this.tableData = [];
            ElMessage.error("查询数据为空！");
          }
        })
        .catch(() => {
          ElMessage.error("请求失败");
        });
    },
    // 嵌套表格相同内容合并
    objectSpanMethod({ row, columnIndex, rowIndex }) {
      if (columnIndex === 1) {
        const tableData = this.tableData.filter((item) =>
          item.list.some((listItem) => listItem.valuDescription === row.valuDescription),
        );
        console.log(tableData);

        let maxListLength = -1;
        let longestListIndex = -1;
        //找出list最长的一条
        tableData.forEach((item, index) => {
          if (item.list.length > maxListLength) {
            maxListLength = item.list.length;
            longestListIndex = index;
          }
        });

        const maxLengthIndex = tableData.findIndex((item) => item === tableData[longestListIndex]);

        console.log(maxLengthIndex); // 输出最长列表的索引

        //tableData[]要动态，是所有当中list最长的做参考
        //第一行进入，不是第一行的价值观不等于上一行的价值观
        console.log(row.valuDescription, tableData[0].list);
        console.log(rowIndex);
        if (rowIndex === 0 || row.valuDescription != tableData[maxLengthIndex].list[rowIndex - 1].valuDescription) {
          let rowspan = 0;

          //遇到相同，合并的行数增加
          if (tableData.length > 0 && tableData[0].list) {
            tableData[maxLengthIndex].list.forEach((element) => {
              if (element.valuDescription === row.valuDescription) {
                rowspan++;
              }
            });
          }
          return [rowspan, 1];
        } else {
          return [0, 0];
        }
      }
    },
    showTips(obj, row) {
      /*obj为鼠标移入时的事件对象*/

      /*currentWidth 为文本在页面中所占的宽度，创建标签，加入到页面，获取currentWidth ,最后在移除*/
      let TemporaryTag = document.createElement("span");
      let context = row.deptRemark.replace(/\$/g, "。");
      console.log(context);
      // TemporaryTag.innerText = context;
      TemporaryTag.className = "getTextWidth";
      document.querySelector("body").appendChild(TemporaryTag);
      // let currentWidth = document.querySelector(".getTextWidth").offsetWidth;
      // document.querySelector(".getTextWidth").remove();

      /*cellWidth为表格容器的宽度*/
      // const cellWidth = obj.target.offsetWidth;

      /*当文本宽度小于||等于容器宽度两倍时，代表文本显示未超过两行*/
      // currentWidth <= 2 * cellWidth ? (row.showTooltip = false) : (row.showTooltip = true);
      // console.log(currentWidth);
    },
  },
};
</script>

<style lang="scss" scoped>
.valuesTable {
  padding: 1rem;
  background-color: #fff;
  height: 95%;
  border-radius: 10px;
}
.valuesTableTitle {
  display: flex;
  align-items: center;
  justify-content: space-between;
  text-align: left;
  padding: 1rem;
}
.el-form {
  display: flex;
  justify-content: space-around;
}

.myNote {
  display: -webkit-box;
  text-overflow: ellipsis;
  overflow: hidden;
  -webkit-line-clamp: 1;
  -webkit-box-orient: vertical;
}
// .el-table .el-table__cell {
//   text-align: center;
// }
</style>
