<template>
  <div class="valuesTable">
    <div class="valuesTableTitle">查询部门价值观</div>
    <el-form :rules="rules">
      <el-form-item label="年份" prop="year">
        <el-select clearable placeholder="请选择年份" v-model="year">
          <el-option v-for="item in yearOptions" :key="item" :label="item" :value="item" />
        </el-select>
      </el-form-item>
      <el-form-item label="月份" prop="month">
        <el-select clearable placeholder="请选择月份" v-model="month">
          <el-option v-for="item in monthOptions" :key="item.monthId" :label="item.month" :value="item.monthId" />
        </el-select>
      </el-form-item>
      <el-form-item label="部门" prop="deptId">
        <el-select clearable placeholder="请选择部门" v-model="deptId">
          <el-option v-for="item in deptOptions" :key="item.deptId" :label="item.deptName" :value="item.deptId" />
        </el-select>
      </el-form-item>
      <el-form-item label="姓名"><el-input placeholder="请输入查询的姓名" v-model="name"></el-input></el-form-item>
      <el-button @click="getValuesDeptList">查询</el-button>
    </el-form>

    <el-table :data="tableData" height="40rem">
      <el-table-column type="expand" width="80">
        <template #default="scope">
          <el-table
            :data="scope.row.list"
            :span-method="objectSpanMethod"
            border
            show-summary
            sum-text="总分"
            style="width: 100%"
          >
            <el-table-column label="序号" type="index" width="80"></el-table-column>
            <el-table-column label="价值观" prop="valuDescription"></el-table-column>
            <el-table-column label="行为" prop="actionDescription"></el-table-column>
            <el-table-column label="案例" prop="example"></el-table-column>
            <el-table-column label="自评" prop="selfScore" width="80"></el-table-column>
            <el-table-column label="他评" prop="leaderScore" width="80"></el-table-column>
          </el-table>
        </template>
      </el-table-column>
      <el-table-column label="年份" prop="year"></el-table-column>
      <el-table-column label="月份" prop="month"></el-table-column>
      <el-table-column label="姓名" prop="name"></el-table-column>
    </el-table>
  </div>
</template>

<script>
import axios from "axios";
import { ElConfigProvider, ElMessage } from "element-plus";
import { deptList } from "@/api/register/index";
// import store from "@/store";

export default {
  data() {
    return {
      tableData: [],
      year: "",
      month: "",
      deptId: 2,
      name: "",
      deptOptions: [],
      yearOptions: [],
      monthOptions: [
        { monthId: 1, month: "一月" },
        { monthId: 2, month: "二月" },
        { monthId: 3, month: "三月" },
        { monthId: 4, month: "四月" },
        { monthId: 5, month: "五月" },
        { monthId: 6, month: "六月" },
        { monthId: 7, month: "七月" },
        { monthId: 8, month: "八月" },
        { monthId: 9, month: "九月" },
        { monthId: 10, month: "十月" },
        { monthId: 11, month: "十一月" },
        { monthId: 12, month: "十二月" },
      ],
      rules: {
        year: [{ required: true, message: "请选择年份", trigger: "blur" }],
        month: [{ required: true, message: "请选择月份", trigger: "blur" }],
        deptId: [{ required: true, message: "请选择部门", trigger: "blur" }],
      },
    };
  },
  components: {
    [ElConfigProvider.name]: ElConfigProvider,
  },
  created() {
    this.nowtime();
    // this.getValuesDeptList();
    deptList()
      .then((res) => {
        this.deptOptions = res.data.data;
      })
      .catch(() => {});
  },
  methods: {
    //获取当前时间
    nowtime() {
      let nowDate = new Date();
      this.year = nowDate.getFullYear();
      this.month = nowDate.getMonth() + 1;
      for (let i = 2021; i <= this.year; i++) {
        this.yearOptions.push(i);
      }
    },
    //获取部门价值观列表
    getValuesDeptList() {
      axios({
        url: "http://192.168.60.108:8989/ifi-personal/value/searchValueDataHistoryRecords",
        method: "post",
        data: { year: this.year, month: this.month, deptId: this.deptId, name: this.name },
      })
        .then((res) => {
          if (res.data.code == 0) {
            //重组数据
            const tableData = Object.values(res.data.data);
            this.tableData = tableData.map((item) => {
              const list = item.map((item) => {
                return {
                  name: item.name,
                  valuDescription: item.valuDescription,
                  actionDescription: item.actionDescription,
                  selfScore: item.selfScore,
                  example: item.example,
                  valueTotalScore: item.valueTotalScore,
                  leaderScore: item.leaderScore,
                };
              });
              return {
                name: item[0].name,
                year: item[0].year,
                month: item[0].month,
                list: list,
              };
            });

            console.log(this.tableData);
          }

          if (res.data.code != 0) {
            ElMessage.error(res.data.message);
          }
        })
        .catch(() => {});
    },
    //嵌套表格相同内容合并
    objectSpanMethod({ rowIndex, columnIndex }) {
      if (columnIndex === 1) {
        if (rowIndex % 4 === 0) {
          return {
            rowspan: 4,
            colspan: 1,
          };
        } else {
          return {
            rowspan: 0,
            colspan: 0,
          };
        }
      }
    },
  },
};
</script>

<style lang="scss" scoped>
.valuesTable {
  padding: 1rem;
  background-color: #fff;
}
.valuesTableTitle {
  display: flex;
  align-items: center;
  justify-content: space-between;
  text-align: left;
  padding: 1rem;
}
.el-form {
  display: flex;
  justify-content: space-around;
  .el-table .el-table__cell {
    text-align: center;
  }
}
</style>
