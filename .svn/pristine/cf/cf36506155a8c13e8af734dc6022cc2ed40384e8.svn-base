<template>
  <div class="loglist">
    <el-table :data="logDocList" border :height="tableHeight">
      <el-table-column label="序号" type="index" width="80"></el-table-column>
      <el-table-column label="文件名" prop="name"></el-table-column>
      <el-table-column label="文件大小" prop="size"></el-table-column>
      <el-table-column label="操作">
        <template #default="{ row }">
          <el-button type="danger" size="small" circle @click="deleteRow(row)"
            ><el-icon><Delete /></el-icon
          ></el-button>
          <el-button type="primary" size="small" circle @click="downRow(row)"
            ><el-icon><Download /></el-icon
          ></el-button>
        </template>
      </el-table-column>
    </el-table>
    <div class="pagination">
      <el-pagination
        v-model:current-page="currentPage"
        v-model:page-size="length"
        :page-sizes="[15, 30, 45, 50]"
        :disabled="disabled"
        background
        layout="total,sizes, prev, pager, next"
        :total="allData.length"
        @size-change="handleSizeChange"
        @current-change="handleCurrentChange"
      />
    </div>
  </div>
</template>

<script>
import { getLogDoc, deleteLog, downLog } from "@/api/log/index";
import { Delete, Download } from "@element-plus/icons-vue";
import { ElMessageBox } from "element-plus";

export default {
  components: { Delete, Download },
  data() {
    return {
      allData: [],
      logDocList: [],
      tableHeight: null,
      currentPage: 1,
      length: 15,
    };
  },
  mounted() {
    this.getLogDoc();
    this.$nextTick(() => {
      // 根据浏览器高度设置初始高度
      this.tableHeight = window.innerHeight - 180;
      // 监听浏览器高度变化，改变表格高度
      window.onresize = () => {
        this.tableHeight = window.innerHeight - 180;
      };
    });
  },
  methods: {
    getLogDoc() {
      getLogDoc().then((res) => {
        if (res.data.code == 0) {
          this.allData = res.data.data;
          this.getTableData();
        }
      });
    },
    getTableData() {
      this.logDocList = this.allData.slice((this.currentPage - 1) * this.length, this.currentPage * this.length);
    },
    handleSizeChange(newSize) {
      this.length = newSize;
      this.getTableData();
    },
    handleCurrentChange(newPage) {
      this.currentPage = newPage;
      this.getTableData();
    },
    deleteRow(row) {
      ElMessageBox.confirm("是否确定删除此信息", "提示", {
        cancelButtonText: "取消",
        confirmButtonText: "确定",
        type: "warning",
      }).then(() => {
        deleteLog({ name: row.name }, this);
      });
    },
    downRow(row) {
      downLog(row.name);
    },
  },
};
</script>

<style lang="scss" scoped>
.loglist {
  padding: 17px 17px 15px 17px;
  background-color: #fff;
  height: 95%;
  border-radius: 10px;
}
.pagination {
  padding: 16px;
  display: flex;
  justify-content: end;
}
</style>
