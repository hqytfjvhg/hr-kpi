<template>
  <div class="valuesTable">
    <div class="valuesTableTitle">查询部门价值观得分</div>
    <el-form :rules="rules">
      <el-form-item label="年份" prop="year">
        <el-select placeholder="请选择年份" v-model="year" style="width: 100px">
          <el-option v-for="item in yearOptions" :key="item" :label="item" :value="item" />
        </el-select>
      </el-form-item>
      <el-form-item label="月份" prop="month">
        <el-select placeholder="请选择月份" v-model="month" style="width: 100px">
          <el-option v-for="item in monthOptions" :key="item.monthId" :label="item.month" :value="item.monthId" />
        </el-select>
      </el-form-item>
      <el-form-item label="部门" prop="deptId">
        <el-select clearable placeholder="请选择部门" v-model="deptId" multiple style="width: 300px">
          <el-option v-for="item in deptOptions" :key="item.deptId" :label="item.deptName" :value="item.deptId" />
        </el-select>
      </el-form-item>
      <el-form-item label="姓名"
        ><el-input placeholder="请输入查询的姓名" v-model="name" style="width: 150px"></el-input
      ></el-form-item>
      <el-button
        v-if="
          deptId.length == 0 ||
          (tableData1.length > 0 && tableData1[0].year != year) ||
          (tableData1.length > 0 && tableData1[0].month != month)
        "
        @click="getValuesDeptList"
        >查询</el-button
      >
      <el-button v-else @click="selectValueDept">查询</el-button>
      <!-- <el-button  @click="getValueDept">计算</el-button> -->
    </el-form>

    <el-table :data="tableData1" border height="68vh">
      <el-table-column label="序号" type="index" width="80"></el-table-column>
      <el-table-column label="部门" prop="deptName"></el-table-column>
      <el-table-column label="姓名" prop="name"></el-table-column>
      <el-table-column label="价值观分数" prop="valueScore"></el-table-column>
      <el-table-column label="价值观实际得分" prop="valueRealScore"></el-table-column>
      <el-table-column label="状态" prop="complete">
        <template #default="scope">
          <span style="color: #67c23a" v-if="scope.row.complete">已完成审批</span>
          <span style="color: #f56c6c" v-else>未完成审批</span>
        </template>
      </el-table-column>
      <el-table-column label="年份" prop="year"></el-table-column>
      <el-table-column label="月份" prop="month"></el-table-column>
    </el-table>
  </div>
</template>

<script>
import { getValueDeptScore } from "@/api/values/index.js";
import { ElConfigProvider, ElMessage } from "element-plus";
import { deptList } from "@/api/register/index";
import store from "@/store";

export default {
  data() {
    return {
      tableData: [],
      tableData1: [],
      newestMonth: [], //存储最新月的数据
      year: "",
      month: "",
      deptId: [],
      name: "",
      deptOptions: store.state.deptList ? store.state.deptList : [],
      yearOptions: [],
      monthOptions: [
        { monthId: 1, month: "一月" },
        { monthId: 2, month: "二月" },
        { monthId: 3, month: "三月" },
        { monthId: 4, month: "四月" },
        { monthId: 5, month: "五月" },
        { monthId: 6, month: "六月" },
        { monthId: 7, month: "七月" },
        { monthId: 8, month: "八月" },
        { monthId: 9, month: "九月" },
        { monthId: 10, month: "十月" },
        { monthId: 11, month: "十一月" },
        { monthId: 12, month: "十二月" },
      ],
      rules: {
        year: [{ required: true, message: "请选择年份", trigger: "blur" }],
        month: [{ required: true, message: "请选择月份", trigger: "blur" }],
        deptId: [{ message: "请选择部门", trigger: "blur" }],
      },
    };
  },
  components: {
    [ElConfigProvider.name]: ElConfigProvider,
  },
  created() {
    this.nowtime();
    if (store.state.deptList.length == 0) {
      deptList()
        .then((res) => {
          if (res.data.code == 0) {
            this.deptOptions = res.data.data;
          }
        })
        .catch(() => {
          ElMessage.error("请求失败");
        });
    }

    this.getValuesDeptList();
  },
  methods: {
    //获取当前时间
    nowtime() {
      let nowDate = new Date();
      this.year = nowDate.getFullYear();
      this.month = nowDate.getMonth() + 1;
      for (let i = 2021; i <= this.year; i++) {
        this.yearOptions.push(i);
      }
    },
    //获取部门价值观列表
    getValuesDeptList() {
      const data = {
        year: this.year,
        month: this.month,
        name: this.name,
        deptIdList: this.deptId,
      };
      getValueDeptScore(data)
        .then((res) => {
          if (res.data.code == 0) {
            if (res.data.data.length > 0) {
              this.tableData = res.data.data.map((item) => {
                return { ...item, year: this.year, month: this.month };
              });
              this.tableData = this.tableData.map((item) => {
                const deptOption = this.deptOptions.find((item1) => item1.deptId == item.deptId);
                if (deptOption) {
                  return { ...item, deptName: deptOption.deptName };
                } else {
                  // 如果没有找到匹配的项，你可能想要返回原始的item，或者返回null，或者做其他处理
                  return item;
                }
              });
              this.tableData1 = this.tableData;
              // this.newestMonth=this.tableData
              //存储最新月份的数据
              if (this.year == this.tableData[0].year) {
                this.newestMonth = this.tableData;
                this.tableData1 = this.newestMonth;
              }
              //第一次进来

              // console.log(this.tableData1);
            } else {
              this.tableData = [];
              this.tableData1 = [];
            }
          }
        })
        .catch();
    },
    selectValueDept() {
      console.log(this.deptId);
      if (this.deptId.length > 0) {
        this.tableData1 = this.deptId.reduce((acc, deptId) => {
          return [...acc, ...this.newestMonth.filter((item1) => item1.deptId == deptId)];
        }, []);
        // console.log(this.tableData1);
      }
    },
    // 嵌套表格相同内容合并
    objectSpanMethod({ row, columnIndex, rowIndex }) {
      if (columnIndex === 1) {
        const tableData = this.tableData.filter((item) =>
          item.list.some((listItem) => listItem.valuDescription === row.valuDescription),
        );
        console.log(tableData);

        let maxListLength = -1;
        let longestListIndex = -1;
        //找出list最长的一条
        tableData.forEach((item, index) => {
          if (item.list.length > maxListLength) {
            maxListLength = item.list.length;
            longestListIndex = index;
          }
        });

        const maxLengthIndex = tableData.findIndex((item) => item === tableData[longestListIndex]);

        console.log(maxLengthIndex); // 输出最长列表的索引

        //tableData[]要动态，是所有当中list最长的做参考
        //第一行进入，不是第一行的价值观不等于上一行的价值观
        console.log(row.valuDescription, tableData[0].list);
        console.log(rowIndex);
        if (rowIndex === 0 || row.valuDescription != tableData[maxLengthIndex].list[rowIndex - 1].valuDescription) {
          let rowspan = 0;

          //遇到相同，合并的行数增加
          if (tableData.length > 0 && tableData[0].list) {
            tableData[maxLengthIndex].list.forEach((element) => {
              if (element.valuDescription === row.valuDescription) {
                rowspan++;
              }
            });
          }
          return [rowspan, 1];
        } else {
          return [0, 0];
        }
      }
    },
    showTips(obj, row) {
      /*obj为鼠标移入时的事件对象*/

      /*currentWidth 为文本在页面中所占的宽度，创建标签，加入到页面，获取currentWidth ,最后在移除*/
      let TemporaryTag = document.createElement("span");
      let context = row.deptRemark.replace(/\$/g, "。");
      console.log(context);
      // TemporaryTag.innerText = context;
      TemporaryTag.className = "getTextWidth";
      document.querySelector("body").appendChild(TemporaryTag);
      // let currentWidth = document.querySelector(".getTextWidth").offsetWidth;
      // document.querySelector(".getTextWidth").remove();

      /*cellWidth为表格容器的宽度*/
      // const cellWidth = obj.target.offsetWidth;

      /*当文本宽度小于||等于容器宽度两倍时，代表文本显示未超过两行*/
      // currentWidth <= 2 * cellWidth ? (row.showTooltip = false) : (row.showTooltip = true);
      // console.log(currentWidth);
    },
  },
};
</script>

<style lang="scss" scoped>
.valuesTable {
  padding: 17px;
  background-color: #fff;
  height: 95%;
  border-radius: 10px;
}
.valuesTableTitle {
  display: flex;
  align-items: center;
  justify-content: space-between;
  text-align: left;
  padding: 1rem;
}
.el-form {
  display: flex;
  justify-content: space-around;
}

.myNote {
  display: -webkit-box;
  text-overflow: ellipsis;
  overflow: hidden;
  -webkit-line-clamp: 1;
  -webkit-box-orient: vertical;
}
// .el-table .el-table__cell {
//   text-align: center;
// }
</style>
