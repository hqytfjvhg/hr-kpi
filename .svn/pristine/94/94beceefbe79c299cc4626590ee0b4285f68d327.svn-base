<template>
  <div class="page-style">
    <div class="btn-group">
      <el-button type="primary" @click="handleExport">导出</el-button>
      <el-button type="primary" @click="handleEditDish" :disabled="Object.values(oneWeekMenu).length === 0"
        >修改</el-button
      >
      <el-button type="primary" @click="handleSaveDish" :disabled="!isEdit || Object.values(oneWeekMenu).length === 0"
        >保存</el-button
      >
      <el-popconfirm
        :title="`确定删除吗?`"
        confirm-button-text="确定"
        cancel-button-text="取消"
        @confirm="handleDelectDish"
      >
        <template #reference>
          <el-button type="primary" :disabled="Object.values(oneWeekMenu).length === 0">删除</el-button>
        </template>
      </el-popconfirm>
      <el-button @click="isShowImg = true" type="primary">带图片</el-button>
      <el-button @click="isShowImg = false" type="primary">不带图片</el-button>

      <div style="margin-top: 15px; font-size: 19px">
        {{ nextWeekName.split("@")[0] }}年{{ nextWeekName.split("@")[1] }}周菜谱
      </div>
    </div>

    <el-table
      :data="Object.values(oneWeekMenu)"
      :cell-class-name="addClass"
      border
      id="table"
      :span-method="arraySpanMethod"
    >
      <el-table-column :label="titleDate[0] + ' 至 ' + titleDate[1] + ' 菜谱'">
        <el-table-column label="" prop="time" width="120"></el-table-column>
        <el-table-column
          v-for="(item, index) in Object.keys(labelText)"
          :key="item"
          :label="labelText[item]"
          align="center"
        >
          <template #default="scope">
            <div class="menu-content">
              <div v-for="item1 in scope.row[index + 1]" :key="item1" class="menu">
                <img
                  :src="item1.base64 == null ? `@/assets/noimg.png` : 'data:image/png;base64,' + item1.base64"
                  alt=""
                  style="width: 50px; height: 50px"
                  v-if="(item1.type === 1 || item1.type === 2) && isShowImg && item1.base64 !== null"
                />
                <img
                  src="@/assets/noimg.png"
                  alt=""
                  style="width: 50px; height: 50px"
                  v-if="(item1.type === 1 || item1.type === 2) && isShowImg && item1.base64 == null"
                />

                <div v-if="!isEdit" style="width: auto; white-space: break-spaces; line-height: 50px">
                  {{ item1.name }}
                </div>
                <div v-else>
                  <el-select v-model="item1.name">
                    <el-option
                      v-for="op in dishList.filter((el) => el.type === item1.type)"
                      :key="op"
                      :label="op.name"
                      :value="op.name"
                    >
                    </el-option>
                  </el-select>
                </div>
              </div>
            </div>
          </template> </el-table-column
      ></el-table-column>
    </el-table>
    <!-- <div class="table-style">
      <el-table :span-method="arraySpanMethod" :data="meals" style="width: 200px">
        <el-table-column label="餐别" prop="name" width="60"></el-table-column>
      </el-table>
      <el-table v-for="(data, index) in oneWeekMenu" :key="data" :data="data" border width="150">
        <el-table-column :label="daysOfWeek[index]" prop="name">
          <template #default="{ row }">
            <img
              :src="'data:image/jpeg;base64,' + row.base64"
              alt=""
              style="width: 50px; height: 40px"
              v-if="row.belong === 2 || row.belong === 2"
            />
            <div>{{ row.name }}</div>
          </template>
        </el-table-column>
      </el-table>
    </div> -->
    <div class="form-style">
      <div style="font-size: 19px">菜谱规则</div>
      <div style="margin: 15px 0">
        其中包括<span> “非新菜” </span> <el-input v-model="FormData.noNewDish" style="width: 60px"></el-input>个；
        <span style="color: #409eff"> “非系统新菜” </span>
        <el-input v-model="FormData.addNewDish" style="width: 60px"></el-input>个；
        <span style="color: #67c23a"> “系统新菜” </span>
        <el-input v-model="FormData.systemNewDish" style="width: 60px"></el-input>个。

        <el-button @click="handleGetMenu" type="primary">生成菜谱</el-button
        ><el-button @click="saveDish" type="success">保存当前菜谱</el-button>
      </div>
      <!-- <el-form :model="FormData" :inline="true">
        <el-form-item label="1、非新菜">
          <el-input v-model="FormData.noNewDish"></el-input>
        </el-form-item>
        <el-form-item label="2、非系统新菜">
          <el-input v-model="FormData.addNewDish"></el-input>
        </el-form-item>
        <el-form-item label="3、系统新菜">
          <el-input v-model="FormData.systemNewDish"></el-input>
        </el-form-item>
        <el-form-item
          ><el-button @click="handleGetMenu" type="primary">生成菜谱</el-button
          ><el-button @click="saveDish" type="success">保存当前菜谱</el-button></el-form-item
        >
      </el-form> -->
    </div>
    <div v-if="Object.values(dishData).length > 0">
      <el-carousel
        ref="carousel"
        :height="isShowImg ? '700px' : '420px'"
        arrow="always"
        :autoplay="false"
        trigger="click"
        indicator-position="none"
        @change="changeDishIndex"
      >
        <el-carousel-item v-for="item in 5" :key="item">
          <el-scrollbar>
            <el-table
              :data="Object.values(dishData[item - 1])"
              :cell-class-name="addClass"
              border
              id="table"
              :span-method="arraySpanMethod"
            >
              <el-table-column label="" prop="time" width="60"></el-table-column>
              <el-table-column v-for="(item, index) in Object.keys(labelText)" :key="item" :label="labelText[item]">
                <template #default="scope">
                  <div class="menu-content">
                    <div v-for="item1 in scope.row[index + 1]" :key="item1" class="menu">
                      <!-- {{ scope.row[index] }} -->
                      <img
                        :src="'data:image/png;base64,' + item1.base64"
                        alt=""
                        style="width: 50px; height: 50px"
                        v-if="(item1.type === 1 || item1.type === 2) && isShowImg && item1.base64 !== null"
                      />
                      <img
                        src="@/assets/noimg.png"
                        alt=""
                        style="width: 50px; height: 50px"
                        v-if="(item1.type === 1 || item1.type === 2) && isShowImg && item1.base64 === null"
                      />

                      <!-- <div :style="{ color: item1.newDish ? 'red' : item1.systemNewDish ? 'green' : 'black' }">
                        {{ item1.name }}
                      </div> -->

                      <div
                        v-if="item1.newDish && !item1.systemGenerate"
                        style="color: #409eff; width: auto; white-space: break-spaces; line-height: 50px"
                      >
                        {{ item1.name }}
                      </div>
                      <div
                        v-if="item1.systemGenerate && item1.newDish"
                        style="color: #67c23a; width: auto; white-space: break-spaces; line-height: 50px"
                      >
                        {{ item1.name }}
                      </div>
                      <div v-if="!item1.newDish" style="width: auto; white-space: break-spaces; line-height: 50px">
                        {{ item1.name }}
                      </div>
                    </div>
                  </div>
                </template>
              </el-table-column>
            </el-table>
            <!-- <el-table :data="dishData[item]" border highlight-current-row>
              <el-table-column label="时间">
                <template #default="scope">
                  {{ Object.values(labelText)[scope.$index] }}
                </template>
              </el-table-column>
              <el-table-column label="早餐" prop="breakfastName">
              </el-table-column>
              <el-table-column label="午餐">
                <el-table-column prop="lunchMeatDishName">
                  <template #default="{ row }">
                    <img
                      :src="'data:image/jpeg;base64,' + row.lunchMeatDishBase64"
                      alt=""
                      style="width: 40px; height: 40px"
                    />
                    <div>{{ row.lunchMeatDishName }}</div>
                  </template>
                </el-table-column>
                <el-table-column prop="lunchVegetableDishName">
                  <template #default="{ row }">
                    <img
                      :src="'data:image/jpeg;base64,' + row.lunchVegetableDishBase64"
                      alt=""
                      style="width: 40px; height: 40px"
                    />
                    <div>{{ row.lunchVegetableDishName }}</div>
                  </template>
                </el-table-column>
              </el-table-column>
              <el-table-column label="晚餐">
                <el-table-column prop="dinnerMeatDishName">
                  <template #default="{ row }">
                    <img
                      :src="'data:image/jpeg;base64,' + row.dinnerMeatDishBase64"
                      alt=""
                      style="width: 40px; height: 40px"
                    />
                    <div>{{ row.dinnerMeatDishName }}</div>
                  </template>
                </el-table-column>
                <el-table-column prop="dinnerVegetableDishName">
                  <template #default="{ row }">
                    <img
                      :src="'data:image/jpeg;base64,' + row.dinnerVegetableDishBase64"
                      alt=""
                      style="width: 40px; height: 40px"
                    />
                    <div>{{ row.dinnerVegetableDishName }}</div>
                  </template>
                </el-table-column>
              </el-table-column>
              <el-table-column label="汤" prop="soup"></el-table-column>
              <el-table-column label="配菜" prop="garnish"></el-table-column>
              <el-table-column label="水果" prop="fruit"></el-table-column>
            </el-table> -->
          </el-scrollbar>
          <!-- <el-table :data="tableData">
            <el-table-column label="餐食类型" prop="mealType" />
            <el-table-column v-for="day in daysOfWeek" :key="day" :label="day.name">
              <template #default="scope">
                <span v-if="scope.row[day.day]">{{ scope.row[day.day] }}</span>
              </template>
            </el-table-column>
          </el-table> -->
        </el-carousel-item>
      </el-carousel>
      <el-radio-group v-model="dishIndex" @change="changeBtnIndex" style="margin-top: 10px">
        <el-radio-button :value="0" :label="0">菜谱1</el-radio-button>
        <el-radio-button :value="1" :label="1">菜谱2</el-radio-button>
        <el-radio-button :value="2" :label="2">菜谱3</el-radio-button>
        <el-radio-button :value="3" :label="3">菜谱4</el-radio-button>
        <el-radio-button :value="4" :label="4">菜谱5</el-radio-button>
      </el-radio-group>
    </div>
  </div>
</template>

<script>
import axios from "@/utils/http";
import { ElMessage, ElMessageBox } from "element-plus";
import html2canvas from "html2canvas";

export default {
  data() {
    return {
      labelText: {
        Monday: "星期一",
        Tuesday: "星期二",
        Wednesday: "星期三",
        Thursday: "星期四",
        Friday: "星期五",
        Saturday: "星期六",
      },
      weekMenu: [
        {
          time: "早餐",
          Monday: [
            { src: "./assets/KPI.svg", name: "叉烧包" },
            { src: "@/assets/KPI.svg", name: "水煮蛋" },
            { src: "@/assets/KPI.svg", name: "罗汉果菊花茶" },
          ],
          Tuesday: [
            { src: "@/assets/KPI.svg", name: "咸骨粥" },
            { src: "@/assets/KPI.svg", name: "流沙包" },
            { src: "@/assets/KPI.svg", name: "茶叶蛋" },
          ],
          Wednesday: [
            { src: "@/assets/KPI.svg", name: "肉丝鸡蛋炒河粉" },
            { src: "@/assets/KPI.svg", name: "黑豆豆浆" },
          ],
          Thursday: [
            { src: "@/assets/KPI.svg", name: "葱花卷" },
            { src: "@/assets/KPI.svg", name: "卤蛋" },
            { src: "@/assets/KPI.svg", name: "热狗" },
            { src: "@/assets/KPI.svg", name: "玉米汁" },
          ],
          Friday: [
            { src: "@/assets/KPI.svg", name: "肉汁卷粉" },
            { src: "@/assets/KPI.svg", name: "水煮蛋" },
            { src: "@/assets/KPI.svg", name: "豆浆" },
          ],
          Saturday: [
            { src: "@/assets/KPI.svg", name: "烧麦" },
            { src: "@/assets/KPI.svg", name: "炒蛋" },
            { src: "@/assets/KPI.svg", name: "绿豆汤" },
          ],
        },
        {
          time: "午餐",
          Monday: [
            { src: "@/assets/KPI.svg", name: "峨眉豆炒腩肉" },
            { src: "@/assets/KPI.svg", name: "蒜蓉上海青" },
          ],
          Tuesday: [
            { src: "@/assets/KPI.svg", name: "油豆腐红烧肉" },
            { src: "@/assets/KPI.svg", name: "蚝油炒菜心" },
          ],
          Wednesday: [
            { src: "@/assets/KPI.svg", name: "西芹炒肉卷" },
            { src: "@/assets/KPI.svg", name: "清炒娃娃菜" },
          ],
          Thursday: [
            { src: "@/assets/KPI.svg", name: "五香卤鸡腿" },
            { src: "@/assets/KPI.svg", name: "油渣炒苦麦菜" },
          ],
          Friday: [
            { src: "@/assets/KPI.svg", name: "豆角回锅肉" },
            { src: "@/assets/KPI.svg", name: "清炒小白菜" },
          ],
          Saturday: [
            { src: "@/assets/KPI.svg", name: "酸菜焖鱼块" },
            { src: "@/assets/KPI.svg", name: "蒜蓉炒长吊瓜" },
          ],
        },
        {
          time: "晚餐",
          Monday: [
            { src: "@/assets/KPI.svg", name: "梅菜蒸肉饼" },
            { src: "@/assets/KPI.svg", name: "清炒绿豆芽" },
          ],
          Tuesday: [
            { src: "@/assets/KPI.svg", name: "宫保鸡丁" },
            { src: "@/assets/KPI.svg", name: "豉油王生菜" },
          ],
          Wednesday: [
            { src: "@/assets/KPI.svg", name: "白灼五花肉" },
            { src: "@/assets/KPI.svg", name: "手撕包菜" },
          ],
          Thursday: [
            { src: "@/assets/KPI.svg", name: "莲藕炒五花肉" },
            { src: "@/assets/KPI.svg", name: "上汤菠菜" },
          ],
          Friday: [
            { src: "@/assets/KPI.svg", name: "土豆片炒上肉" },
            { src: "@/assets/KPI.svg", name: "盐水芥菜" },
          ],
          Saturday: [
            { src: "@/assets/KPI.svg", name: "洋葱炒猪肝" },
            { src: "@/assets/KPI.svg", name: "爆炒苋菜" },
          ],
        },
        {
          time: "汤",
          Monday: [{ src: "@/assets/KPI.svg", name: "赤小豆茯苓骨头汤" }],
          Tuesday: [{ src: "@/assets/KPI.svg", name: "海带龙骨汤" }],
          Wednesday: [{ src: "@/assets/KPI.svg", name: "番茄土豆骨头汤" }],
          Thursday: [{ src: "@/assets/KPI.svg", name: "冬瓜薏米大骨汤" }],
          Friday: [{ src: "@/assets/KPI.svg", name: "凉瓜黄豆骨头汤" }],
          Saturday: [{ src: "@/assets/KPI.svg", name: "淮山龙骨汤" }],
        },
      ],

      FormData: {}, //菜谱配置
      dishData: [], //所有菜谱的数据
      tableData: [],
      // daysOfWeek: [
      //   { day: 1, name: "周一" },
      //   { day: 2, name: "周二" },
      //   { day: 3, name: "周三" },
      //   { day: 4, name: "周四" },
      //   { day: 5, name: "周五" },
      //   { day: 6, name: "周六" },
      // ],
      daysOfWeek: { 1: "周一", 2: "周二", 3: "周三", 4: "周四", 5: "周五", 6: "周六" },
      dishIndex: 0,
      oneWeekMenu: {}, //单周菜谱数据
      meals: [
        { name: "早餐" },
        { name: "午餐" },
        { name: "午餐" },
        { name: "晚餐" },
        { name: "晚餐" },
        { name: "汤" },
        { name: "配菜" },
        { name: "水果" },
      ],
      isEdit: false, //是否编辑菜谱
      editArr: [], //修改过的菜谱
      dishList: [], //所有成品菜，修改菜谱需要过滤不同的餐别
      isShowImg: false, //是否显示菜谱的图片
      nextWeekName: "", //下周具体周数
      titleDate: [], //菜谱上面显示的日期
    };
  },

  mounted() {
    this.getDefaultData();
    this.getOneWeekMenu();
  },
  methods: {
    addClass({ rowIndex, columnIndex }) {
      if (columnIndex === 0) {
        return "firstColumn";
      }
      if (rowIndex === 4 || rowIndex === 5) {
        return "lastRow";
      }
    },
    //获取配置信息
    getDefaultData() {
      axios.get("/ifi-personal/dish/menu/getDefaultData").then((res) => {
        if (res.data.code == 0) {
          this.FormData = res.data.data;
        }
      });
    },
    //生成菜谱
    handleGetMenu() {
      if (
        Number(this.FormData.noNewDish) + Number(this.FormData.addNewDish) + Number(this.FormData.systemNewDish) ===
        24
      ) {
        axios.post("/ifi-personal/dish/menu/generateNextWeekMenu", this.FormData).then((res) => {
          if (res.data.code == 0) {
            this.dishData = [];
            Object.values(res.data.data).forEach((op) => {
              let data = {
                早餐: { time: "早餐", 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] },
                午餐: { time: "午餐", 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] },
                晚餐: { time: "晚餐", 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] },
                汤: { time: "汤", 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] },
                // 配菜: { time: "配菜", 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] },
                // 水果: { time: "水果", 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] },
              };
              // console.log(op);

              op.forEach((it) => {
                if (it.belong === 1) {
                  data["早餐"][it.dayOfWeek].push(it);
                } else if (it.belong === 2) {
                  data["午餐"][it.dayOfWeek].push(it);
                } else if (it.belong === 3) {
                  data["晚餐"][it.dayOfWeek].push(it);
                } else if (it.belong === 0 && it.type === 3) {
                  data["汤"][it.dayOfWeek].push(it);
                }
                //  else if (it.belong === 0 && it.type === 5) {
                //   data["配菜"][it.dayOfWeek].push(it);
                // } else if (it.belong === 0 && it.type === 6) {
                //   data["水果"][it.dayOfWeek].push(it);
                // }
              });
              // console.log(data);

              this.dishData.push(data);
            });

            // console.log(this.dishData, "菜谱");
          }
        });
      } else {
        ElMessage.error("菜谱规则总和必须为 24 ");
      }
      // console.log(
      //   Number(this.FormData.noNewDish) + Number(this.FormData.addNewDish) + Number(this.FormData.systemNewDish),
      // );
    },
    //修改上面菜谱要同时修改按钮组
    changeDishIndex(newIndex) {
      this.dishIndex = newIndex;
    },
    //修改按钮组也要修改菜谱
    changeBtnIndex(val) {
      this.$refs.carousel.setActiveItem(val);
    },
    //保存菜谱
    saveDish() {
      // console.log(this.dishData[this.dishIndex]);
      let sourceData = [];
      Object.values(this.dishData[this.dishIndex]).forEach((it) => {
        Object.values(it).forEach((op) => {
          if (Array.isArray(op)) {
            Array.prototype.push.apply(sourceData, op);
          }
        });
      });
      // console.log(sourceData);

      // const mealTypes = {
      //   breakfastName: { type: 4, source: 0 },
      //   lunchVegetableDishName: { type: 1, source: 0 },
      //   lunchMeatDishName: { type: 2, source: 0 },
      //   dinnerVegetableDishName: { type: 1, source: 0 },
      //   dinnerMeatDishName: { type: 2, source: 0 },
      //   garnish: { type: 5, source: 0 },
      //   soup: { type: 3, source: 0 },
      //   fruit: { type: 6, source: 0 },
      // };

      // let data = sourceData.flatMap((it) => {
      //   return Object.entries(it).reduce((acc, [key, value]) => {
      //     console.log(key);

      //     console.log(mealTypes[key]);

      //     if (mealTypes[key]) {
      //       console.log(value);

      //       if (value !== null) {
      //         acc.push({
      //           belong: key.startsWith("breakfast")
      //             ? 1
      //             : key.startsWith("lunch")
      //             ? 2
      //             : key.startsWith("dinner")
      //             ? 3
      //             : 0,
      //           dayOfWeek: it.dayOfWeek,
      //           // id: 0,
      //           name: value || "",
      //           source: mealTypes[key].source,
      //           type: mealTypes[key].type,
      //           useDate: it.useDate,
      //         });
      //       }
      //     }

      //     return acc;
      //   }, []);
      // });

      axios.post("/ifi-personal/dish/menu/saveMenu", sourceData).then((res) => {
        if (res.data.code == 0) {
          ElMessage.success("保存成功");
          this.getOneWeekMenu();
        }
      });
    },
    //获取下一周的日期
    // getNextWeekStartAndEnd() {
    //   const currentDate = new Date();
    //   const currentDay = currentDate.getDay();
    //   const daysUntilNextMonday = (8 - currentDay) % 7;
    //   const nextMondayDate = new Date(currentDate.getTime() + daysUntilNextMonday * 24 * 60 * 60 * 1000);
    //   const nextSundayDate = new Date(nextMondayDate.getTime() + 6 * 24 * 60 * 60 * 1000);

    //   const startDateFormatted = nextMondayDate.toISOString().split("T")[0];
    //   const endDateFormatted = nextSundayDate.toISOString().split("T")[0];

    //   return { startDate: startDateFormatted, endDate: endDateFormatted };
    // },
    getNextWeekStartAndEnd() {
      const currentDate = new Date();
      const currentDayOfWeek = currentDate.getDay();

      let daysUntilNextMonday = (8 - currentDayOfWeek) % 7;
      if (daysUntilNextMonday === 0) {
        daysUntilNextMonday = 7;
      }
      const nextMondayDate = new Date(currentDate.getTime() + daysUntilNextMonday * 24 * 60 * 60 * 1000);
      const nextSundayDate = new Date(nextMondayDate.getTime() + 6 * 24 * 60 * 60 * 1000);

      const startDateFormatted =
        nextMondayDate.getFullYear() +
        "-" +
        this.padZero(nextMondayDate.getMonth() + 1) +
        "-" +
        this.padZero(nextMondayDate.getDate());

      const endDateFormatted =
        nextSundayDate.getFullYear() +
        "-" +
        this.padZero(nextSundayDate.getMonth() + 1) +
        "-" +
        this.padZero(nextSundayDate.getDate());

      return { startDate: startDateFormatted, endDate: endDateFormatted };
    },
    padZero(num) {
      return num < 10 ? "0" + num : num;
    },
    //获取单周菜谱
    getOneWeekMenu() {
      const { startDate, endDate } = this.getNextWeekStartAndEnd();
      this.titleDate = [startDate, endDate];
      axios
        .post("/ifi-personal/dish/menu/getMenuListByDate", {
          endDate: endDate,
          startDate: startDate,
          all: false,
        })
        .then((res) => {
          if (res.data.code == 0) {
            let data = {
              早餐: { time: "早餐", 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] },
              午餐: { time: "午餐", 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] },
              晚餐: { time: "晚餐", 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] },
              汤: { time: "汤", 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] },
              // 配菜: { time: "配菜", 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] },
              // 水果: { time: "水果", 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] },
            };
            this.oneWeekMenu = [];
            if (Object.keys(res.data.data).length > 0) {
              this.nextWeekName = Object.keys(res.data.data)[0];
              Object.values(res.data.data)[0].forEach((it) => {
                if (it.belong === 1) {
                  data["早餐"][it.dayOfWeek].push(it);
                } else if (it.belong === 2) {
                  data["午餐"][it.dayOfWeek].push(it);
                } else if (it.belong === 3) {
                  data["晚餐"][it.dayOfWeek].push(it);
                } else if (it.belong === 0 && it.type === 3) {
                  data["汤"][it.dayOfWeek].push(it);
                }
                //  else if (it.belong === 0 && it.type === 5) {
                //   data["配菜"][it.dayOfWeek].push(it);
                // } else if (it.belong === 0 && it.type === 6) {
                //   data["水果"][it.dayOfWeek].push(it);
                // }
              });
              this.oneWeekMenu = data;
              // console.log(this.oneWeekMenu, 999);
            }
          }
        });
    },

    //修改caipu
    handleEditDish() {
      this.isEdit = true;
      axios.get("/ifi-personal/dish/finished/getAllFinishedDishList").then((res) => {
        if (res.data.code == 0) {
          this.dishList = res.data.data;
        }
      });
    },
    //保存单周菜圃
    handleSaveDish() {
      // console.log(Object.values(this.oneWeekMenu), 888);
      let data = [];
      const nameCounts = {};
      Object.values(this.oneWeekMenu).forEach((it) => {
        Object.values(it).forEach((op) => {
          if (Array.isArray(op)) {
            Array.prototype.push.apply(data, op);
            op.forEach((item) => {
              if (nameCounts[item.name]) {
                nameCounts[item.name]++;
              } else {
                nameCounts[item.name] = 1;
              }
            });
          }
        });
      });
      // console.log(nameCounts, 888);
      const duplicates = Object.keys(nameCounts).filter((name) => nameCounts[name] > 1);
      // console.log(duplicates, 888);

      if (duplicates.length > 0) {
        ElMessageBox.confirm(
          "下列菜品重复出现：" + "<br>" + `${duplicates.join("；")}` + "<br>" + "是否继续保存",
          "提示",
          {
            confirmButtonText: "确定",
            cancelButtonText: "取消",
            dangerouslyUseHTMLString: true,
            type: "warning",
          },
        ).then(() => {
          this.handleSave(data);
        });
      } else {
        this.handleSave(data);
      }
    },
    //保存单周菜谱的请求
    handleSave(data) {
      axios.post("/ifi-personal/dish/menu/updateMenu", data).then((res) => {
        if (res.data.code == 0) {
          ElMessage.success("保存成功");
          this.isEdit = false;
          this.getOneWeekMenu();
        }
      });
    },
    //删除菜谱
    handleDelectDish() {
      axios.post("/ifi-personal/dish/menu/delNextWeekMenu").then((res) => {
        if (res.data.code == 0) {
          ElMessage.success("删除成功");
          this.getOneWeekMenu();
        }
      });
    },
    //导出图片
    handleExport() {
      var node = document.getElementById("table");
      // console.log(node);
      // node.classList.add("lastRowHidden");
      let _this = this;
      html2canvas(node, { logging: true, scale: 2 }).then(function (canvas) {
        // node.classList.remove("lastRowHidden");
        var a = document.createElement("a");
        a.href = canvas.toDataURL("image/png");
        a.download = `${_this.titleDate[0] + " 至 " + _this.titleDate[1] + " 菜谱"}.png`;
        a.click();
      });
    },
    //表格合并
    arraySpanMethod({ rowIndex, columnIndex }) {
      if (rowIndex === 5) {
        if (columnIndex === 5) {
          return [1, 2];
        }
      }
    },
  },
};
</script>

<style lang="scss" scoped>
.page-style {
  padding: 10px;
  // height: 100vh;

  height: auto;
  // overflow: scroll;
}
.menu-content {
  // width: fit-content;
  // white-space: nowrap;

  // display: flex;
  // justify-content: space-around;
  .menu {
    // margin-right: 10px;
    // white-space: nowrap;
    // height: 50px;
    // line-height: 50px;
    // margin: 0 auto 10px;
    // width: 120px;

    // color: #409eff;
  }
}

// :deep(.el-table thead tr) {
//   font-weight: 700 !important;
//   color: #409eff !important;
//   font-style: 18px !important;
// }
:deep(.firstColumn) {
  // border: 1px solid #fff;
  // border-color: #fff !important;
  // border-right: 1px solid white !important;
  // background-color: #d9ecff !important;
  // border-radius: 20px 0 0 20px;
  margin: 10px;
  // border: 10px solid #fff;
  // color: #409eff;
  font-size: 19px;
  // font-weight: 700;
  height: 60px;
}
.form-style {
  text-align: left;
  margin-top: 15px;
}
.table-style {
  display: flex;
}
.btn-group {
  margin-bottom: 10px;
  text-align: left;
}
// :deep(.el-table) {
//   border: 1px solid #000;
// }
// :deep(.el-table__border) {
//   border-color: #000 !important;
// }
// :root {
//   --el-table-border-color: #000;
// }
:deep(.el-table thead tr th) {
  // border-color: #000 !important;
  font-size: 19px;
  font-weight: normal;
  height: 50px;
}
:deep(.el-table__header) {
  // border: 1px solid #000;
  font-size: 19px;
}
// :deep(.el-table--enable-row-transition .el-table__body td.el-table__cell) {
//   border-color: #000;
// }
// :deep(.el-table--border::after) {
//   background-color: #fff;
// }

:deep(
    .lastRowHidden .el-table__body tbody tr.el-table__row:last-child,
    .lastRowHidden .el-table__body tbody tr.el-table__row:nth-last-child(2)
  ) {
  display: none !important;
}
:deep(.lastRowHidden .el-table__body tbody tr.el-table__row:nth-last-child(2)) {
  display: none !important;
}
</style>
