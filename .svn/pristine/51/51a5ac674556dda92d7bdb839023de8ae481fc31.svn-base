<template>
  <div class="mainHome">
    <!-- 温总首页 -->
    <div style="display: flex; justify-content: space-between; height: 350px">
      <div style="min-width: 32%">
        <el-card style="border-radius: 15px; text-align: left" shadow="never">
          <template #header>
            <div class="card-header">待办事项</div>
          </template>
          <div style="height: 250px">
            <ul>
              <li
                v-if="isShowApprovalValue"
                style="display: flex; justify-content: space-between; width: 100%; align-items: center"
              >
                <span
                  ><el-icon style="color: #e6a23c"><WarningFilled /></el-icon>
                  <span style="margin-left: 15px">请审批价值观</span></span
                >
                <router-link :to="'/kpi/aboutInfo?activeName=' + 'first'" style="color: #409eff; text-decoration: none">
                  <!-- <el-link type="primary" :underline="false">去审批</el-link> -->
                  <span>去审批</span>
                </router-link>
              </li>
              <div
                v-if="$store.state.number === 0 && $store.state.number2 === 0"
                style="display: flex; justify-content: center; width: 100%; align-items: center"
              >
                暂无待办事项
              </div>
            </ul>
          </div>
        </el-card>
      </div>
      <div style="min-width: 66%">
        <el-card style="text-align: center; border-radius: 15px" shadow="never">
          <template #header
            ><div class="card-header">
              <span>{{ bonusCoefficientYear }}年{{ maxBounsMonth }}月奖金系数</span>
            </div>
          </template>
          <div id="EchartbounsDept" style="height: 250px"></div>
        </el-card>
      </div>
    </div>

    <div style="display: flex; justify-content: space-between; height: 350px; margin-top: 20px">
      <div style="min-width: 32%; height: 100%">
        <el-card style="text-align: center; border-radius: 15px" shadow="never">
          <template #header
            ><div class="card-header">
              <span> {{ valueYear }}年价值观得分</span>
            </div>
          </template>
          <div id="valueScore" style="height: 320px"></div>
        </el-card>
      </div>

      <div style="min-width: 32%">
        <el-card style="text-align: center; border-radius: 15px" shadow="never">
          <template #header
            ><div class="card-header">
              <span> {{ KPIYear }}年KPI得分</span>
            </div>
          </template>
          <div id="kpiScore" style="height: 320px"></div>
        </el-card>
      </div>
      <div style="min-width: 32%">
        <el-card style="text-align: center; border-radius: 15px" shadow="never">
          <template #header
            ><div class="card-header">
              <span> {{ bonusCoefficientYear }}年奖金系数</span>
            </div>
          </template>

          <div class="bonusStyle">
            <div>
              <div v-for="item in bonusCoefficientAllYear" :key="item" class="bonusCoefficient">
                <div class="bonusCoefficient-value">{{ item.averageData }}<span>%</span></div>
                <div class="bonusCoefficient-month">
                  <span style="color: #5470c6">{{ item.month }}</span>
                </div>
              </div>
            </div>
            <div v-if="bonusCoefficientAllYear.length > 0" class="bonusCoefficient-compare">
              <div>
                <i
                  class="fa fa-caret-down"
                  aria-hidden="true"
                  style="color: #f56c6c; font-size: 50px; margin-right: 10px"
                  v-if="bonusCoefficientAllYear[0].averageData - bonusCoefficientAllYear[1].averageData < 0"
                ></i>
                <i
                  class="fa fa-caret-up"
                  aria-hidden="true"
                  style="color: #67c23a; font-size: 50px; margin-right: 10px"
                  v-else
                ></i>

                {{
                  Math.abs(
                    ((bonusCoefficientAllYear[0].averageData - bonusCoefficientAllYear[1].averageData) /
                      bonusCoefficientAllYear[1].averageData) *
                      100,
                  ).toFixed(2)
                }}%
              </div>
              <div style="font-size: 20px; margin-left: 45px">同比上月</div>
            </div>
          </div>
        </el-card>
      </div>
    </div>
  </div>
</template>

<script>
import { ElMessage } from "element-plus";
import { deptList } from "@/api/register/index";
import store from "@/store";
import { getEventNumber, selectPerformanceInfo } from "@/api/about/index";
import { getBonusCoefficientAllYear, getKPIAllYear, getValueAllYear } from "@/api/visualization/index";
import * as echarts from "echarts";
import { getBonusCoefficient } from "@/api/annualAverage";
import { WarningFilled } from "@element-plus/icons-vue";

export default {
  components: { WarningFilled },
  data() {
    return {
      isModel: false, //控制选择模板的弹窗
      dialogVisible: false, //控制命名的弹窗
      modelDetil: [],
      multipleSelection: [], //选择模板
      valueTitle: "", //命名的名字
      criticalMonth: "", //临界月份
      newestEventInfo: [], //最新月份的数据
      noWriteValueList: [], //未填写价值观名单
      deptOptions: [],
      uncompletedNumber: [], //人员剩余待办事件数量
      deptId: 7, //绑定的部门id
      year: "",
      xAxisData: [],
      yAxisData: [],
      newestEventNoInfo: false, //判断最新月份是否有数据
      noSignUserList: [], //未签名的名单
      yearOptions: [],
      bonusCoefficientData: [], //奖金系数大于120的人
      bonusCoefficientYear: "",
      bonusCoefficientAllYear: [], //全年的奖金系数
      KPIYear: "",
      KPIAllYear: [], //全年的kpi得分
      valueYear: "",
      valueAllYear: [], //全年价值观得分
      isShowApprovalValue: false,
      bounsDept: [], //部门某月的奖金系数
      maxBounsMonth: null, //部门数据的最新月份
    };
  },
  async mounted() {
    await getEventNumber()
      .then((res) => {
        if (res.data.code == 0) {
          console.log(res.data.data);
          //价值观待办事件数量
          if (res.data.data.result.find((item) => item.deptFlowState === 0 && item.hrFlowState === 0)) {
            this.isShowWriteValue = true;
          }
          if (res.data.data.result.find((item) => !(item.deptFlowState === 0 && item.hrFlowState === 0))) {
            this.isShowApprovalValue = true;
          }
          console.log(this.isShowApprovalValue);
          store.commit("changeNumber", res.data.data.uncompletedEventNumber);
          store.commit("changeValueResult", res.data.data.result);

          //业绩待办事件数量
          selectPerformanceInfo().then((res) => {
            if (res.data.code == 0) {
              store.commit("changeNumber2", res.data.data.uncompletedEventNumber);
              store.commit("saveMonth", res.data.data.month);
            }
          });
        }
      })
      .catch((e) => {
        console.log(e);
        ElMessage.error("请求失败");
      });
    await deptList()
      .then((res) => {
        if (res.data.code == 0) {
          this.deptOptions = res.data.data;
          store.commit("saveDeptOptions", this.deptOptions);
        }
      })
      .catch(() => {
        ElMessage.error("请求失败");
      });

    let nowDate = new Date();
    this.year = nowDate.getFullYear();
    this.bonusCoefficientYear = nowDate.getFullYear();
    this.KPIYear = nowDate.getFullYear();
    this.valueYear = nowDate.getFullYear();
    if (0 < nowDate.getDate() && nowDate.getDate() <= 15) {
      this.criticalMonth = nowDate.getMonth();
      if (this.criticalMonth == 0) {
        this.criticalMonth = 12;
        this.year = nowDate.getFullYear() - 1;
        this.bonusCoefficientYear = nowDate.getFullYear() - 1;
        this.KPIYear = nowDate.getFullYear() - 1;
        this.valueYear = nowDate.getFullYear() - 1;
      }
    } else if (15 < nowDate.getDate() && nowDate.getDate() < 32) {
      this.criticalMonth = nowDate.getMonth() + 1;
      // console.log(this.month);
    }
    for (let i = 2021; i <= nowDate.getFullYear(); i++) {
      this.yearOptions.push(i);
    }
    store.commit("saveYear", this.year);
    store.commit("saveCriticalMonth", this.criticalMonth);
    store.commit("saveYearOptions", this.yearOptions);

    this.getBonusCoefficientAllYear(this.bonusCoefficientYear);
    this.getKPIAllYear(this.KPIYear);
    this.getValueAllYear(this.valueYear);
  },
  methods: {
    //查询一年每月的平均奖金系数
    async getBonusCoefficientAllYear(newVal) {
      await getBonusCoefficientAllYear({ year: newVal }).then((res) => {
        if (res.data.code == 0 && res.data.data[0].month != null) {
          res.data.data.sort((a, b) => b.month - a.month);
          this.bonusCoefficientAllYear = res.data.data;
          this.bonusCoefficientAllYear.map((item) => {
            if (item.month === -1) {
              item.month = "全年平均";
            } else if (item.month !== null) {
              item.month = item.month + "月";
            }
          });
          this.maxBounsMonth = Number(res.data.data[0].month.replace("月", ""));
          if (this.maxBounsMonth === 12) {
            if (res.data.data[1].month !== -1 && Number(res.data.data[1].month.replace("月", "")) === 1) {
              this.maxBounsMonth = res.data.data[1].month;
            }
          }
          this.getBonusDept();
        }
      });
    },
    //查询一年每月的kpi得分
    async getKPIAllYear(newVal) {
      await getKPIAllYear({ year: newVal }).then((res) => {
        if (res.data.code == 0 && res.data.data[0].month != null) {
          res.data.data.sort((a, b) => a.month - b.month);
          this.KPIAllYear = res.data.data;
          this.KPIAllYear.map((item) => {
            if (item.month === -1) {
              item.month = "全年平均";
            } else {
              item.month = item.month + "月";
            }
          });
        }
      });
      this.getEchartKPIScore();
    },
    //kpi得分图表
    getEchartKPIScore() {
      let EchartKPIScore = echarts.init(document.getElementById("kpiScore"));
      EchartKPIScore.clear();
      let option = {
        tooltip: {
          trigger: "axis",
          axisPointer: {
            type: "shadow",
          },
        },
        legend: {},
        grid: {
          left: "3%",
          // right: "4%",
          bottom: "3%",
          top: "3%",
          containLabel: true,
        },
        xAxis: {
          type: "value",
          boundaryGap: [0, 0.01],
          axisLabel: { show: false },
          splitLine: { show: false },
        },
        yAxis: {
          type: "category",
          data: this.KPIAllYear.map((item) => item.month),
          axisTick: { show: false },
          axisLine: { show: false },
          axisLabel: {
            fontSize: 16,
            color: "black",
          },
        },
        series: [
          {
            type: "bar",
            data: this.KPIAllYear.map((item) => item.averageData),
            label: {
              show: true,
              position: "inside",
              //每个数据显示出来，位置在底部里面，旋转了90度，c是y轴的数值，b是x轴的数值，a没有内容
              formatter: "{c}",
              //文字大小
              fontSize: 30,
              color: "#fff",
            },
            itemStyle: {
              color: function (params) {
                const colors = [" #5470c6", " #91cc75", " #fac858"];
                return colors[params.dataIndex % colors.length];
              },
            },
          },
        ],
      };
      option && EchartKPIScore.setOption(option);
      window.addEventListener("resize", function () {
        EchartKPIScore.resize();
      });
    },
    //获取价值观得分
    async getValueAllYear(newVal) {
      await getValueAllYear({ year: newVal }).then((res) => {
        if (res.data.code == 0 && res.data.data[0].month != null) {
          // res.data.data.sort((a, b) => b.month - a.month);
          this.valueAllYear = res.data.data.slice(0, 2);
          this.valueAllYear.map((item, index) => {
            if (item.month === -1) {
              console.log(item, index);
              this.valueAllYear.splice(index, 1);
            }
          });
        }
      });
      this.getEchartValueScore();
    },
    getEchartValueScore() {
      let EchartValueScore = echarts.init(document.getElementById("valueScore"));
      EchartValueScore.clear();
      let option = {
        tooltip: {
          trigger: "axis",
          axisPointer: {
            type: "shadow",
          },
        },
        // 外面颜色的标记，默认是top-center，不设置data也有数据，前提是series有设置name属性
        legend: {
          data: this.valueAllYear.map((item) => item.month + "月"),
        },
        xAxis: [
          {
            type: "category",
            axisTick: { show: false }, //刻度线
            data: this.valueAllYear.map((item) => item.month + "月"),
            splitLine: { show: false },
            axisLine: { show: false },
            axisLabel: {
              fontSize: 16,
              color: "black",
            },
          },
        ],
        yAxis: [
          {
            type: "value",
            axisLabel: { show: false }, //刻度线
            splitLine: { show: false },
          },
        ],
        series: {
          data: this.valueAllYear.map((item) => item.averageData),
          type: "bar",
          label: {
            show: true,
            position: "inside",
            //每个数据显示出来，位置在底部里面，旋转了90度，c是y轴的数值，b是x轴的数值，a没有内容
            formatter: "{c}",
            //文字大小
            fontSize: 30,
            color: "#fff",
          },
          itemStyle: {
            color: function (params) {
              const colors = [" #5470c6", " #91cc75"];
              return colors[params.dataIndex % colors.length];
            },
          },
        },
        grid: {
          left: "3%",
          right: "4%",
          bottom: "3%",
          top: "3%",
          containLabel: true,
        },
      };
      option && EchartValueScore.setOption(option);
      window.addEventListener("resize", function () {
        EchartValueScore.resize();
      });
    },
    //部门奖金系数数据
    async getBonusDept() {
      await getBonusCoefficient({ year: this.bonusCoefficientYear }).then((res) => {
        if (res.data.code == 0) {
          this.bounsDept = res.data.data.filter((item) => item.month == this.maxBounsMonth);
        }
      });
      this.getEchartBounsDept();
    },
    getEchartBounsDept() {
      let bounsDept = echarts.init(document.getElementById("EchartbounsDept"));
      bounsDept.clear();
      let option = {
        tooltip: {
          trigger: "axis",
          axisPointer: {
            type: "shadow",
          },
        },
        grid: {
          left: "3%",
          right: "4%",
          bottom: "3%",
          top: "5%",
          containLabel: true,
        },
        // 工具box，可以转换数据的样式
        toolbox: {
          show: true,
          orient: "vertical",
          left: "right",
          top: "center",
          feature: {
            mark: { show: true },
            //数据视图
            // dataView: { show: true, readOnly: false },
            //刷新
            // restore: { show: true },
            //转换数据的类型，折现、柱状、堆叠
            magicType: { show: true, type: ["bar", "line"] },

            //下载
            saveAsImage: { show: true },
          },
        },
        xAxis: [
          {
            type: "category",
            axisTick: { show: false }, //刻度线
            axisLabel: { interval: 0, fontSize: "10px" },
            data: this.bounsDept.map((item) => item.deptName),
          },
        ],
        yAxis: [
          {
            type: "value",
            axisTick: { show: false }, //刻度线
            axisLabel: {
              show: false,
            },
            splitLine: { show: false },
          },
        ],
        series: {
          data: this.bounsDept.map((item) => item.averageData),
          type: "bar",
          label: {
            show: true,
            position: "top",
            //每个数据显示出来，位置在底部里面，旋转了90度，c是y轴的数值，b是x轴的数值，a没有内容
            formatter: "{c}",
            //文字大小
            fontSize: 18,
            color: "black",
          },
          itemStyle: {
            color: function (params) {
              const colors = [
                " #5470c6",
                " #91cc75",
                " #fac858",
                " #ee6666",
                " #73c0de",
                " #3ba272",
                " #fc8452",
                " #9a60b4",
                " #ea7ccc",
              ];
              return colors[params.dataIndex % colors.length];
            },
          },
        },
      };
      option && bounsDept.setOption(option);
      window.addEventListener("resize", function () {
        bounsDept.resize();
      });
    },
  },
};
</script>

<style lang="scss" scoped>
.mainHome {
  .mainHome-title {
    display: flex;
    align-items: center;
    justify-content: space-between;
    text-align: left;
    padding: 1rem;
  }
}
.formStyle {
  display: flex;
  .formStyle-item {
    padding-right: 12px;
    margin-bottom: 0px;
  }
}
.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  justify-items: center;
  font-weight: 700;
  color: "#777";
}

.bonusStyle {
  display: flex;
  grid: 1rem;
  font-size: 30px;
  font-weight: 700;
  align-items: center;
  justify-content: space-around;
  height: 320px;
  .bonusCoefficient-compare {
    align-items: center;
  }
}
.bonusCoefficient {
  height: 80px;
  width: 100%;
  text-align: left;
  margin: 20px 0;
  font-weight: 700;
  .bonusCoefficient-value {
    font-size: 45px;

    span {
      font-size: 30px;
    }
  }
  .bonusCoefficient-month {
    font-size: 18px;
  }
}

.ulStyle {
  margin-left: 3vw;
  margin-right: 1vw;
  text-align: left;
  height: 250px;
  display: flex;
  list-style: none;
  font-size: 16px;
  ul {
    width: 100%;
  }
  li {
    margin: 20px 0;
    display: flex;
    justify-content: space-between;
    position: relative;
    &::before {
      content: "";
      position: absolute;
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background-color: black;
      top: 25%;
      left: -10%;
    }
  }
}
</style>
