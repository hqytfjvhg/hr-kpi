import { createStore } from "vuex";
// import { getToken, saveToken } from "@/utils/storage";

export default createStore({
  state: {
    registerIdentifyUuid: "",
    userId: localStorage.getItem("userid") ? localStorage.getItem("userid") : "",
    name: localStorage.getItem("name") ? localStorage.getItem("name") : "",
    token: localStorage.getItem("token") ? localStorage.getItem("token") : "",
    role: localStorage.getItem("role") ? localStorage.getItem("role") : "",
    deptId: localStorage.getItem("deptId") ? localStorage.getItem("deptId") : "",
    number: localStorage.getItem("number") ? localStorage.getItem("number") : "",
    number2: localStorage.getItem("number2") ? localStorage.getItem("number2") : "",
    deptList: [], //部门列表
    currentUserId: localStorage.getItem("currentUserId") ? localStorage.getItem("currentUserId") : "",
    currentState: localStorage.getItem("currentState") ? localStorage.getItem("currentState") : "",
    // todoList: (JSON.stringify(undefined) && JSON.parse(localStorage.getItem("todoList"))) || [], //json.parse无法解析undefi
    approvalData: [], //事件下模板的数据
    currentName: localStorage.getItem("currentName") ? localStorage.getItem("currentName") : "",
    // userSelectName: [],
    userList: [],
    // selectUser: [], //某一模板存着选中的人名，用于备份做对比
    modelFinishState: [], //存储当前事件的完成状态和时间线
    modelFinishPerformance: [], //存储当前事件的业绩excel数据和时间线
    tags: [], //多页签存的数据
    //tagsview标签显示隐藏
    isCollapse: false,
  },
  getters: {},
  mutations: {
    changeUuid(state, payload) {
      state.registerIdentifyUuid = payload;
      // console.log(state.registerIdentifyUuid);
    },
    changeUserId(state, payload) {
      state.userId = payload;
      localStorage.setItem("userid", payload);
    },
    changeToken(state, payload) {
      state.token = payload;
      localStorage.setItem("token", payload);
      // saveToken(payload);
    },
    changeRole(state, payload) {
      state.role = payload;
      localStorage.setItem("role", payload);
      // console.log(payload);
    },
    changeName(state, payload) {
      state.name = payload;
      localStorage.setItem("name", payload);
      // console.log(payload);
    },
    changeDeptId(state, payload) {
      state.deptId = payload;
      localStorage.setItem("deptId", payload);
    },
    changeNumber(state, payload) {
      state.number = payload;
      localStorage.setItem("number", payload);
      // console.log(payload);
    },
    changeNumber2(state, payload) {
      if (payload != undefined) {
        state.number2 = payload + state.number;
        localStorage.setItem("number2", payload);
      } else {
        state.number2 = state.number;
        localStorage.setItem("number2", state.number);
      }

      // console.log(state.number2);
    },
    deptList(state, payload) {
      state.deptList = payload;
    },
    currentUserId(state, payload) {
      state.currentUserId = payload;
      // console.log(payload);
      localStorage.setItem("currentUserId", payload); //领导评分，当前的用户id
    },
    currentDeptFlow(state, payload) {
      state.currentState = payload;
      localStorage.setItem("currentState", payload);
    },
    changeApprovalData(state, payload) {
      let index = state.approvalData.findIndex((item) => {
        // console.log(Object.keys(item));
        return Object.keys(item).toString() === Object.keys(payload).toString();
      });
      console.log(index, Object.keys(payload));
      if (index !== -1) {
        state.approvalData[index] = payload;
      } else {
        state.approvalData.push(payload);
      }
      console.log(state.approvalData);
    },
    clearApprovalData(state) {
      state.approvalData = [];
      state.userList = [];
      state.modelFinishState = [];
      state.modelFinishPerformance = [];
      console.log(state.approvalData);
    },
    currentName(state, payload) {
      state.currentName = payload;
      localStorage.setItem("currentName", payload);
    },
    //存储价值观选择的人
    userList(state, payload) {
      let index = state.userList.findIndex((item) => {
        // console.log(Object.keys(item));
        return Object.keys(item).toString() === Object.keys(payload).toString();
      });
      console.log(index, Object.keys(payload));
      if (index !== -1) {
        state.userList[index] = payload;
      } else {
        state.userList.push(payload);
      }
      console.log(state.userList);
    },
    // oneModelSelectUser(state, payload) {
    //   state.selectUser = payload;
    // },
    modelFinishState(state, payload) {
      let index = state.modelFinishState.findIndex((item) => {
        return Object.keys(item).toString() === Object.keys(payload).toString();
      });
      if (index != -1) {
        state.modelFinishState[index] = payload;
      } else {
        state.modelFinishState.push(payload);
      }
      console.log(payload);
    },
    modelFinishPerformance(state, payload) {
      let index = state.modelFinishPerformance.findIndex((item) => {
        return Object.keys(item).toString() === Object.keys(payload).toString();
      });
      if (index != -1) {
        state.modelFinishPerformance[index] = payload;
      } else {
        state.modelFinishPerformance.push(payload);
      }
      console.log(payload);
    },

    pushtags(state, val) {
      //如果等于-1说明tabs不存在那么插入，否则什么都不做
      //findindex找角标，循环判断一下，如果等于那么就代表有相同的，就不必添加，如果找不到那就是-1.就添加
      console.log(val);
      let result = state.tags.findIndex((item) => item.name === val.name);
      result === -1 ? state.tags.push(val) : "";
      // console.log(state.tags);
      // localStorage.setItem("tags",  JSON.stringify(state.tags));
    },
    //关闭标签
    closeTab(state, val) {
      //同上，找角标，然后用角标的位置对应删除一位。splice：这是数组的删除方法
      let result = state.tags.findIndex((item) => item.name === val.name);
      state.tags.splice(result, 1);
    },
    //关闭所有tagsview标签
    cleartagsview(state, val) {
      //清空数组
      state.tags = [];
      //跳转到首页,val接受传过来的当前路由
      if (val.path !== "/mainHome") {
        this.$router.push({ path: "/mainHome" });
      }
    },
    //改变tagsview显示隐藏
    changeisshow(state) {
      state.isCollapse = !state.isCollapse;
    },
  },
});
